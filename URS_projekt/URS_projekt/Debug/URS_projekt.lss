
URS_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067a  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005eb  00000000  00000000  00000826  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000269  00000000  00000000  00000e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034b  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  000013fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001467  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <stdint.h>
#include <avr/io.h>
#include <util/delay.h>

int main()
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xff;
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	8a bb       	out	0x1a, r24	; 26
	//PORTA = 0;
	//_delay_ms(1000);
	int i = 0;
	unsigned int ubrr = 95;
	unsigned char data[] = "c";
  7a:	83 e6       	ldi	r24, 0x63	; 99
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	9a 83       	std	Y+2, r25	; 0x02
  80:	89 83       	std	Y+1, r24	; 0x01
	
	UBRRH = (ubrr>>8);
  82:	10 bc       	out	0x20, r1	; 32
	UBRRL = (ubrr);  
  84:	8f e5       	ldi	r24, 0x5F	; 95
  86:	89 b9       	out	0x09, r24	; 9
	
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UPM1) | (1 << UPM0) | (1 << USBS);       
  88:	80 b5       	in	r24, 0x20	; 32
  8a:	8c 6b       	ori	r24, 0xBC	; 188
  8c:	80 bd       	out	0x20, r24	; 32
	UCSRB |= (1 << TXEN); 
  8e:	8a b1       	in	r24, 0x0a	; 10
  90:	88 60       	ori	r24, 0x08	; 8
  92:	8a b9       	out	0x0a, r24	; 10
	
	while(1) {
		
		i = 0;
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
		while(data[i] != 0) 
  98:	04 c0       	rjmp	.+8      	; 0xa2 <main+0x36>
		{
			while (!( UCSRA & (1<<UDRE))); 
  9a:	5d 9b       	sbis	0x0b, 5	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x2e>
			
			UDR = data[i];	
  9e:	2c b9       	out	0x0c, r18	; 12
			i++;                             
  a0:	01 96       	adiw	r24, 0x01	; 1
	UCSRB |= (1 << TXEN); 
	
	while(1) {
		
		i = 0;
		while(data[i] != 0) 
  a2:	e1 e0       	ldi	r30, 0x01	; 1
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	ec 0f       	add	r30, r28
  a8:	fd 1f       	adc	r31, r29
  aa:	e8 0f       	add	r30, r24
  ac:	f9 1f       	adc	r31, r25
  ae:	20 81       	ld	r18, Z
  b0:	21 11       	cpse	r18, r1
  b2:	f3 cf       	rjmp	.-26     	; 0x9a <main+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	8f e7       	ldi	r24, 0x7F	; 127
  b8:	96 e1       	ldi	r25, 0x16	; 22
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x4e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x58>
  c4:	00 00       	nop
  c6:	e6 cf       	rjmp	.-52     	; 0x94 <main+0x28>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
