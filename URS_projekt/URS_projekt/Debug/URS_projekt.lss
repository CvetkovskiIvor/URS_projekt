
URS_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ad8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000ad8  00000b4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fb6  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000879  00000000  00000000  00001c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000838  00000000  00000000  000024d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  00002d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000492  00000000  00000000  00002ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008a2  00000000  00000000  0000334e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003bf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  7a:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <writeUsart>:
#include <util/delay.h>
#include <spi.h>
#include <mfrc522.h>
#include <stdio.h>

void writeUsart(char *str){
  82:	ac 01       	movw	r20, r24
	//unsigned char data[] = str;
	int i = 0;
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
	while(str[i] != 0)
  88:	05 c0       	rjmp	.+10     	; 0x94 <writeUsart+0x12>
	{
		while (!( UCSRA & (1<<UDRE)));
  8a:	5d 9b       	sbis	0x0b, 5	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <writeUsart+0x8>
		
		UDR = str[i];
  8e:	9c b9       	out	0x0c, r25	; 12
		i++;
  90:	2f 5f       	subi	r18, 0xFF	; 255
  92:	3f 4f       	sbci	r19, 0xFF	; 255
#include <stdio.h>

void writeUsart(char *str){
	//unsigned char data[] = str;
	int i = 0;
	while(str[i] != 0)
  94:	fa 01       	movw	r30, r20
  96:	e2 0f       	add	r30, r18
  98:	f3 1f       	adc	r31, r19
  9a:	90 81       	ld	r25, Z
  9c:	91 11       	cpse	r25, r1
  9e:	f5 cf       	rjmp	.-22     	; 0x8a <writeUsart+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	97 e4       	ldi	r25, 0x47	; 71
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <writeUsart+0x22>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <writeUsart+0x28>
  aa:	00 00       	nop
  ac:	08 95       	ret

000000ae <usart_init>:
	//  6 BIT TRANSFER
	//  2 STOP BITS
	
	unsigned int ubrr = 95;
	
	UBRRH = (ubrr>>8);
  ae:	10 bc       	out	0x20, r1	; 32
	UBRRL = (ubrr);
  b0:	8f e5       	ldi	r24, 0x5F	; 95
  b2:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UPM0) | (1 << UPM1) | (1 << USBS);
  b4:	8c eb       	ldi	r24, 0xBC	; 188
  b6:	80 bd       	out	0x20, r24	; 32
	UCSRB = (1 << TXEN) | (1 << RXEN);
  b8:	88 e1       	ldi	r24, 0x18	; 24
  ba:	8a b9       	out	0x0a, r24	; 10
  bc:	08 95       	ret

000000be <main>:
}


int main()
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	68 97       	sbiw	r28, 0x18	; 24
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	8f e1       	ldi	r24, 0x1F	; 31
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x1a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x24>
  e2:	00 00       	nop
	char stri[8];
	uint8_t byte = 0;
	uint8_t str[MAX_LEN];
	_delay_ms(50);
	DDRA = 0xff;
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	8a bb       	out	0x1a, r24	; 26
	usart_init();	
  e8:	0e 94 57 00 	call	0xae	; 0xae <usart_init>
	//writeUsart("1235");
		
	spi_init();
  ec:	0e 94 74 02 	call	0x4e8	; 0x4e8 <spi_init>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	8f e3       	ldi	r24, 0x3F	; 63
  f4:	92 e0       	ldi	r25, 0x02	; 2
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x38>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x42>
 100:	00 00       	nop
	//PORTA = ~SPCR;
	_delay_ms(100);
	
	mfrc522_init();
 102:	0e 94 1a 01 	call	0x234	; 0x234 <mfrc522_init>
	
	byte = mfrc522_read(VersionReg);
 106:	87 e3       	ldi	r24, 0x37	; 55
 108:	0e 94 04 01 	call	0x208	; 0x208 <mfrc522_read>
 10c:	18 2f       	mov	r17, r24
	PORTA = byte;
 10e:	8b bb       	out	0x1b, r24	; 27
	if(byte == 0x92)
 110:	82 39       	cpi	r24, 0x92	; 146
 112:	29 f4       	brne	.+10     	; 0x11e <main+0x60>
	{
		writeUsart("522:2");
 114:	80 e6       	ldi	r24, 0x60	; 96
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 41 00 	call	0x82	; 0x82 <writeUsart>
 11c:	0d c0       	rjmp	.+26     	; 0x138 <main+0x7a>
	}else if(byte == 0x91 || byte==0x90)
 11e:	80 e7       	ldi	r24, 0x70	; 112
 120:	81 0f       	add	r24, r17
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	28 f4       	brcc	.+10     	; 0x130 <main+0x72>
	{
		writeUsart("522:1");
 126:	86 e6       	ldi	r24, 0x66	; 102
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 41 00 	call	0x82	; 0x82 <writeUsart>
 12e:	04 c0       	rjmp	.+8      	; 0x138 <main+0x7a>
	}else
	{
		writeUsart("0101\n");
 130:	8c e6       	ldi	r24, 0x6C	; 108
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 41 00 	call	0x82	; 0x82 <writeUsart>
	}
	sprintf(stri, "%d", byte);
 138:	1f 92       	push	r1
 13a:	1f 93       	push	r17
 13c:	82 e7       	ldi	r24, 0x72	; 114
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	9f 93       	push	r25
 142:	8f 93       	push	r24
 144:	8e 01       	movw	r16, r28
 146:	0f 5f       	subi	r16, 0xFF	; 255
 148:	1f 4f       	sbci	r17, 0xFF	; 255
 14a:	1f 93       	push	r17
 14c:	0f 93       	push	r16
 14e:	0e 94 80 02 	call	0x500	; 0x500 <sprintf>
	writeUsart(stri);
 152:	c8 01       	movw	r24, r16
 154:	0e 94 41 00 	call	0x82	; 0x82 <writeUsart>
	
	byte = mfrc522_read(ComIEnReg);
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 04 01 	call	0x208	; 0x208 <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20);
 15e:	68 2f       	mov	r22, r24
 160:	60 62       	ori	r22, 0x20	; 32
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
	byte = mfrc522_read(DivIEnReg);
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 04 01 	call	0x208	; 0x208 <mfrc522_read>
	mfrc522_write(DivIEnReg,byte|0x80);
 16e:	68 2f       	mov	r22, r24
 170:	60 68       	ori	r22, 0x80	; 128
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	8f eb       	ldi	r24, 0xBF	; 191
 17c:	91 e2       	ldi	r25, 0x21	; 33
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0xc0>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0xca>
 188:	00 00       	nop
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
	
	_delay_ms(1500);
	
	while(1){
		byte = mfrc522_request(PICC_REQALL,str);
 196:	be 01       	movw	r22, r28
 198:	67 5f       	subi	r22, 0xF7	; 247
 19a:	7f 4f       	sbci	r23, 0xFF	; 255
 19c:	82 e5       	ldi	r24, 0x52	; 82
 19e:	0e 94 3f 02 	call	0x47e	; 0x47e <mfrc522_request>
		sprintf(stri, "%d\n", byte);
 1a2:	1f 92       	push	r1
 1a4:	8f 93       	push	r24
 1a6:	85 e7       	ldi	r24, 0x75	; 117
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	9f 93       	push	r25
 1ac:	8f 93       	push	r24
 1ae:	8e 01       	movw	r16, r28
 1b0:	0f 5f       	subi	r16, 0xFF	; 255
 1b2:	1f 4f       	sbci	r17, 0xFF	; 255
 1b4:	1f 93       	push	r17
 1b6:	0f 93       	push	r16
 1b8:	0e 94 80 02 	call	0x500	; 0x500 <sprintf>
		writeUsart(stri);
 1bc:	c8 01       	movw	r24, r16
 1be:	0e 94 41 00 	call	0x82	; 0x82 <writeUsart>
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	8f e7       	ldi	r24, 0x7F	; 127
 1c6:	96 e1       	ldi	r25, 0x16	; 22
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x10a>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x114>
 1d2:	00 00       	nop
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	da cf       	rjmp	.-76     	; 0x196 <main+0xd8>

000001e2 <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 1e2:	cf 93       	push	r28
 1e4:	c6 2f       	mov	r28, r22
	ENABLE_CHIP();
 1e6:	98 b3       	in	r25, 0x18	; 24
 1e8:	9b 7f       	andi	r25, 0xFB	; 251
 1ea:	98 bb       	out	0x18, r25	; 24
	spi_transmit((reg<<1)&0x7E);
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	8e 77       	andi	r24, 0x7E	; 126
 1f4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <spi_transmit>
	spi_transmit(data);
 1f8:	8c 2f       	mov	r24, r28
 1fa:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <spi_transmit>
	DISABLE_CHIP();
 1fe:	88 b3       	in	r24, 0x18	; 24
 200:	84 60       	ori	r24, 0x04	; 4
 202:	88 bb       	out	0x18, r24	; 24
}
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	ENABLE_CHIP();
 208:	98 b3       	in	r25, 0x18	; 24
 20a:	9b 7f       	andi	r25, 0xFB	; 251
 20c:	98 bb       	out	0x18, r25	; 24
	spi_transmit(((reg<<1)&0x7E)|0x80);
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	8e 77       	andi	r24, 0x7E	; 126
 216:	80 68       	ori	r24, 0x80	; 128
 218:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <spi_transmit>
	data = spi_transmit(0x00);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <spi_transmit>
	DISABLE_CHIP();
 222:	98 b3       	in	r25, 0x18	; 24
 224:	94 60       	ori	r25, 0x04	; 4
 226:	98 bb       	out	0x18, r25	; 24
	return data;
}
 228:	08 95       	ret

0000022a <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
 22a:	6f e0       	ldi	r22, 0x0F	; 15
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
 232:	08 95       	ret

00000234 <mfrc522_init>:


void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 234:	0e 94 15 01 	call	0x22a	; 0x22a <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 238:	6d e8       	ldi	r22, 0x8D	; 141
 23a:	8a e2       	ldi	r24, 0x2A	; 42
 23c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
 240:	6e e3       	ldi	r22, 0x3E	; 62
 242:	8b e2       	ldi	r24, 0x2B	; 43
 244:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
 248:	6e e1       	ldi	r22, 0x1E	; 30
 24a:	8c e2       	ldi	r24, 0x2C	; 44
 24c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	8d e2       	ldi	r24, 0x2D	; 45
 254:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 258:	60 e4       	ldi	r22, 0x40	; 64
 25a:	85 e1       	ldi	r24, 0x15	; 21
 25c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
 260:	6d e3       	ldi	r22, 0x3D	; 61
 262:	81 e1       	ldi	r24, 0x11	; 17
 264:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
 268:	84 e1       	ldi	r24, 0x14	; 20
 26a:	0e 94 04 01 	call	0x208	; 0x208 <mfrc522_read>
	if(!(byte&0x03))
 26e:	98 2f       	mov	r25, r24
 270:	93 70       	andi	r25, 0x03	; 3
 272:	29 f4       	brne	.+10     	; 0x27e <mfrc522_init+0x4a>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 274:	68 2f       	mov	r22, r24
 276:	63 60       	ori	r22, 0x03	; 3
 278:	84 e1       	ldi	r24, 0x14	; 20
 27a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
 27e:	08 95       	ret

00000280 <mfrc522_to_card>:
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 280:	4f 92       	push	r4
 282:	5f 92       	push	r5
 284:	6f 92       	push	r6
 286:	7f 92       	push	r7
 288:	8f 92       	push	r8
 28a:	9f 92       	push	r9
 28c:	af 92       	push	r10
 28e:	bf 92       	push	r11
 290:	cf 92       	push	r12
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	d8 2f       	mov	r29, r24
 2a2:	7b 01       	movw	r14, r22
 2a4:	c4 2f       	mov	r28, r20
 2a6:	59 01       	movw	r10, r18
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
 2a8:	8c 30       	cpi	r24, 0x0C	; 12
 2aa:	29 f0       	breq	.+10     	; 0x2b6 <mfrc522_to_card+0x36>
 2ac:	8e 30       	cpi	r24, 0x0E	; 14
 2ae:	61 f0       	breq	.+24     	; 0x2c8 <mfrc522_to_card+0x48>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 2b0:	91 2c       	mov	r9, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
 2b2:	81 2c       	mov	r8, r1
 2b4:	10 c0       	rjmp	.+32     	; 0x2d6 <mfrc522_to_card+0x56>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 2b6:	0f 2e       	mov	r0, r31
 2b8:	f0 e3       	ldi	r31, 0x30	; 48
 2ba:	9f 2e       	mov	r9, r31
 2bc:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 2be:	0f 2e       	mov	r0, r31
 2c0:	f7 e7       	ldi	r31, 0x77	; 119
 2c2:	8f 2e       	mov	r8, r31
 2c4:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
 2c6:	07 c0       	rjmp	.+14     	; 0x2d6 <mfrc522_to_card+0x56>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 2c8:	68 94       	set
 2ca:	99 24       	eor	r9, r9
 2cc:	94 f8       	bld	r9, 4

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
 2ce:	0f 2e       	mov	r0, r31
 2d0:	f2 e1       	ldi	r31, 0x12	; 18
 2d2:	8f 2e       	mov	r8, r31
 2d4:	f0 2d       	mov	r31, r0
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	0e 94 04 01 	call	0x208	; 0x208 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 2dc:	68 2f       	mov	r22, r24
 2de:	6f 77       	andi	r22, 0x7F	; 127
 2e0:	84 e0       	ldi	r24, 0x04	; 4
 2e2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 2e6:	8a e0       	ldi	r24, 0x0A	; 10
 2e8:	0e 94 04 01 	call	0x208	; 0x208 <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 2ec:	68 2f       	mov	r22, r24
 2ee:	60 68       	ori	r22, 0x80	; 128
 2f0:	8a e0       	ldi	r24, 0x0A	; 10
 2f2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 2fe:	41 2c       	mov	r4, r1
 300:	51 2c       	mov	r5, r1
 302:	32 01       	movw	r6, r4
 304:	0c c0       	rjmp	.+24     	; 0x31e <mfrc522_to_card+0x9e>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 306:	f7 01       	movw	r30, r14
 308:	e4 0d       	add	r30, r4
 30a:	f5 1d       	adc	r31, r5
 30c:	60 81       	ld	r22, Z
 30e:	89 e0       	ldi	r24, 0x09	; 9
 310:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	48 1a       	sub	r4, r24
 318:	58 0a       	sbc	r5, r24
 31a:	68 0a       	sbc	r6, r24
 31c:	78 0a       	sbc	r7, r24
 31e:	8c 2f       	mov	r24, r28
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	a0 e0       	ldi	r26, 0x00	; 0
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	48 16       	cp	r4, r24
 328:	59 06       	cpc	r5, r25
 32a:	6a 06       	cpc	r6, r26
 32c:	7b 06       	cpc	r7, r27
 32e:	58 f3       	brcs	.-42     	; 0x306 <mfrc522_to_card+0x86>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 330:	6d 2f       	mov	r22, r29
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
    if (cmd == Transceive_CMD)
 338:	dc 30       	cpi	r29, 0x0C	; 12
 33a:	41 f4       	brne	.+16     	; 0x34c <mfrc522_to_card+0xcc>
    {    
		n=mfrc522_read(BitFramingReg);
 33c:	8d e0       	ldi	r24, 0x0D	; 13
 33e:	0e 94 04 01 	call	0x208	; 0x208 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
 342:	68 2f       	mov	r22, r24
 344:	60 68       	ori	r22, 0x80	; 128
 346:	8d e0       	ldi	r24, 0x0D	; 13
 348:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 34c:	0f 2e       	mov	r0, r31
 34e:	f0 ed       	ldi	r31, 0xD0	; 208
 350:	cf 2e       	mov	r12, r31
 352:	f7 e0       	ldi	r31, 0x07	; 7
 354:	df 2e       	mov	r13, r31
 356:	e1 2c       	mov	r14, r1
 358:	f1 2c       	mov	r15, r1
 35a:	f0 2d       	mov	r31, r0
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 35c:	84 e0       	ldi	r24, 0x04	; 4
 35e:	0e 94 04 01 	call	0x208	; 0x208 <mfrc522_read>
 362:	c8 2f       	mov	r28, r24
        i--;
 364:	e1 e0       	ldi	r30, 0x01	; 1
 366:	ce 1a       	sub	r12, r30
 368:	d1 08       	sbc	r13, r1
 36a:	e1 08       	sbc	r14, r1
 36c:	f1 08       	sbc	r15, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 36e:	29 f0       	breq	.+10     	; 0x37a <mfrc522_to_card+0xfa>
 370:	80 fd       	sbrc	r24, 0
 372:	03 c0       	rjmp	.+6      	; 0x37a <mfrc522_to_card+0xfa>
 374:	89 2d       	mov	r24, r9
 376:	8c 23       	and	r24, r28
 378:	89 f3       	breq	.-30     	; 0x35c <mfrc522_to_card+0xdc>

	tmp=mfrc522_read(BitFramingReg);
 37a:	8d e0       	ldi	r24, 0x0D	; 13
 37c:	0e 94 04 01 	call	0x208	; 0x208 <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 380:	68 2f       	mov	r22, r24
 382:	6f 77       	andi	r22, 0x7F	; 127
 384:	8d e0       	ldi	r24, 0x0D	; 13
 386:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
	
    if (i != 0)
 38a:	cd 28       	or	r12, r13
 38c:	ce 28       	or	r12, r14
 38e:	cf 28       	or	r12, r15
 390:	09 f4       	brne	.+2      	; 0x394 <mfrc522_to_card+0x114>
 392:	60 c0       	rjmp	.+192    	; 0x454 <__DATA_REGION_LENGTH__+0x54>
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 394:	86 e0       	ldi	r24, 0x06	; 6
 396:	0e 94 04 01 	call	0x208	; 0x208 <mfrc522_read>
 39a:	8b 71       	andi	r24, 0x1B	; 27
 39c:	09 f0       	breq	.+2      	; 0x3a0 <mfrc522_to_card+0x120>
 39e:	5c c0       	rjmp	.+184    	; 0x458 <__DATA_REGION_LENGTH__+0x58>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
 3a0:	c8 21       	and	r28, r8
 3a2:	c0 fd       	sbrc	r28, 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <mfrc522_to_card+0x12a>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 3a6:	c1 e0       	ldi	r28, 0x01	; 1
 3a8:	01 c0       	rjmp	.+2      	; 0x3ac <mfrc522_to_card+0x12c>
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
 3aa:	c2 e0       	ldi	r28, 0x02	; 2
			}

            if (cmd == Transceive_CMD)
 3ac:	dc 30       	cpi	r29, 0x0C	; 12
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <mfrc522_to_card+0x132>
 3b0:	54 c0       	rjmp	.+168    	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
            {
               	n = mfrc522_read(FIFOLevelReg);
 3b2:	8a e0       	ldi	r24, 0x0A	; 10
 3b4:	0e 94 04 01 	call	0x208	; 0x208 <mfrc522_read>
 3b8:	d8 2f       	mov	r29, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
 3ba:	8c e0       	ldi	r24, 0x0C	; 12
 3bc:	0e 94 04 01 	call	0x208	; 0x208 <mfrc522_read>
 3c0:	28 2f       	mov	r18, r24
 3c2:	27 70       	andi	r18, 0x07	; 7
                if (lastBits)
 3c4:	a9 f0       	breq	.+42     	; 0x3f0 <mfrc522_to_card+0x170>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 3c6:	8d 2f       	mov	r24, r29
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	82 0f       	add	r24, r18
 3da:	91 1d       	adc	r25, r1
 3dc:	09 2e       	mov	r0, r25
 3de:	00 0c       	add	r0, r0
 3e0:	aa 0b       	sbc	r26, r26
 3e2:	bb 0b       	sbc	r27, r27
 3e4:	f8 01       	movw	r30, r16
 3e6:	80 83       	st	Z, r24
 3e8:	91 83       	std	Z+1, r25	; 0x01
 3ea:	a2 83       	std	Z+2, r26	; 0x02
 3ec:	b3 83       	std	Z+3, r27	; 0x03
 3ee:	11 c0       	rjmp	.+34     	; 0x412 <__DATA_REGION_LENGTH__+0x12>
				}
                else
                {   
					*back_data_len = n*8;   
 3f0:	8d 2f       	mov	r24, r29
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	09 2e       	mov	r0, r25
 402:	00 0c       	add	r0, r0
 404:	aa 0b       	sbc	r26, r26
 406:	bb 0b       	sbc	r27, r27
 408:	f8 01       	movw	r30, r16
 40a:	80 83       	st	Z, r24
 40c:	91 83       	std	Z+1, r25	; 0x01
 40e:	a2 83       	std	Z+2, r26	; 0x02
 410:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
 412:	d1 11       	cpse	r29, r1
 414:	01 c0       	rjmp	.+2      	; 0x418 <__DATA_REGION_LENGTH__+0x18>
                {   
					n = 1;    
 416:	d1 e0       	ldi	r29, 0x01	; 1
				}
                if (n > MAX_LEN)
 418:	d1 31       	cpi	r29, 0x11	; 17
 41a:	08 f0       	brcs	.+2      	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
                {   
					n = MAX_LEN;   
 41c:	d0 e1       	ldi	r29, 0x10	; 16
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 41e:	c1 2c       	mov	r12, r1
 420:	d1 2c       	mov	r13, r1
 422:	76 01       	movw	r14, r12
 424:	0d c0       	rjmp	.+26     	; 0x440 <__DATA_REGION_LENGTH__+0x40>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 426:	85 01       	movw	r16, r10
 428:	0c 0d       	add	r16, r12
 42a:	1d 1d       	adc	r17, r13
 42c:	89 e0       	ldi	r24, 0x09	; 9
 42e:	0e 94 04 01 	call	0x208	; 0x208 <mfrc522_read>
 432:	f8 01       	movw	r30, r16
 434:	80 83       	st	Z, r24
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 436:	ff ef       	ldi	r31, 0xFF	; 255
 438:	cf 1a       	sub	r12, r31
 43a:	df 0a       	sbc	r13, r31
 43c:	ef 0a       	sbc	r14, r31
 43e:	ff 0a       	sbc	r15, r31
 440:	8d 2f       	mov	r24, r29
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	a0 e0       	ldi	r26, 0x00	; 0
 446:	b0 e0       	ldi	r27, 0x00	; 0
 448:	c8 16       	cp	r12, r24
 44a:	d9 06       	cpc	r13, r25
 44c:	ea 06       	cpc	r14, r26
 44e:	fb 06       	cpc	r15, r27
 450:	50 f3       	brcs	.-44     	; 0x426 <__DATA_REGION_LENGTH__+0x26>
 452:	03 c0       	rjmp	.+6      	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 454:	c3 e0       	ldi	r28, 0x03	; 3
 456:	01 c0       	rjmp	.+2      	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
				}
            }
        }
        else
        {   
			status = ERROR;  
 458:	c3 e0       	ldi	r28, 0x03	; 3
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
 45a:	8c 2f       	mov	r24, r28
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	ff 90       	pop	r15
 466:	ef 90       	pop	r14
 468:	df 90       	pop	r13
 46a:	cf 90       	pop	r12
 46c:	bf 90       	pop	r11
 46e:	af 90       	pop	r10
 470:	9f 90       	pop	r9
 472:	8f 90       	pop	r8
 474:	7f 90       	pop	r7
 476:	6f 90       	pop	r6
 478:	5f 90       	pop	r5
 47a:	4f 90       	pop	r4
 47c:	08 95       	ret

0000047e <mfrc522_request>:
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 47e:	ef 92       	push	r14
 480:	ff 92       	push	r15
 482:	0f 93       	push	r16
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	00 d0       	rcall	.+0      	; 0x48c <mfrc522_request+0xe>
 48c:	00 d0       	rcall	.+0      	; 0x48e <mfrc522_request+0x10>
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	18 2f       	mov	r17, r24
 494:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 496:	67 e0       	ldi	r22, 0x07	; 7
 498:	8d e0       	ldi	r24, 0x0D	; 13
 49a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mfrc522_write>
	
	tag_type[0] = req_mode;
 49e:	f7 01       	movw	r30, r14
 4a0:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 4a2:	8e 01       	movw	r16, r28
 4a4:	0f 5f       	subi	r16, 0xFF	; 255
 4a6:	1f 4f       	sbci	r17, 0xFF	; 255
 4a8:	97 01       	movw	r18, r14
 4aa:	41 e0       	ldi	r20, 0x01	; 1
 4ac:	b7 01       	movw	r22, r14
 4ae:	8c e0       	ldi	r24, 0x0C	; 12
 4b0:	0e 94 40 01 	call	0x280	; 0x280 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	51 f4       	brne	.+20     	; 0x4cc <mfrc522_request+0x4e>
 4b8:	49 81       	ldd	r20, Y+1	; 0x01
 4ba:	5a 81       	ldd	r21, Y+2	; 0x02
 4bc:	6b 81       	ldd	r22, Y+3	; 0x03
 4be:	7c 81       	ldd	r23, Y+4	; 0x04
 4c0:	40 31       	cpi	r20, 0x10	; 16
 4c2:	51 05       	cpc	r21, r1
 4c4:	61 05       	cpc	r22, r1
 4c6:	71 05       	cpc	r23, r1
 4c8:	19 f4       	brne	.+6      	; 0x4d0 <mfrc522_request+0x52>
 4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <mfrc522_request+0x54>
	{    
		status = ERROR;
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <mfrc522_request+0x54>
 4d0:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	ff 90       	pop	r15
 4e4:	ef 90       	pop	r14
 4e6:	08 95       	ret

000004e8 <spi_init>:
#include <spi.h>

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR |= (1<<4)|(1<<5)|(1<<7);
 4e8:	87 b3       	in	r24, 0x17	; 23
 4ea:	80 6b       	ori	r24, 0xB0	; 176
 4ec:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
 4ee:	8d b1       	in	r24, 0x0d	; 13
 4f0:	81 65       	ori	r24, 0x51	; 81
 4f2:	8d b9       	out	0x0d, r24	; 13
 4f4:	08 95       	ret

000004f6 <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
 4f6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 4f8:	77 9b       	sbis	0x0e, 7	; 14
 4fa:	fe cf       	rjmp	.-4      	; 0x4f8 <spi_transmit+0x2>
	
	return SPDR;
 4fc:	8f b1       	in	r24, 0x0f	; 15
}
 4fe:	08 95       	ret

00000500 <sprintf>:
 500:	ae e0       	ldi	r26, 0x0E	; 14
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	e6 e8       	ldi	r30, 0x86	; 134
 506:	f2 e0       	ldi	r31, 0x02	; 2
 508:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__prologue_saves__+0x1c>
 50c:	0d 89       	ldd	r16, Y+21	; 0x15
 50e:	1e 89       	ldd	r17, Y+22	; 0x16
 510:	86 e0       	ldi	r24, 0x06	; 6
 512:	8c 83       	std	Y+4, r24	; 0x04
 514:	1a 83       	std	Y+2, r17	; 0x02
 516:	09 83       	std	Y+1, r16	; 0x01
 518:	8f ef       	ldi	r24, 0xFF	; 255
 51a:	9f e7       	ldi	r25, 0x7F	; 127
 51c:	9e 83       	std	Y+6, r25	; 0x06
 51e:	8d 83       	std	Y+5, r24	; 0x05
 520:	ae 01       	movw	r20, r28
 522:	47 5e       	subi	r20, 0xE7	; 231
 524:	5f 4f       	sbci	r21, 0xFF	; 255
 526:	6f 89       	ldd	r22, Y+23	; 0x17
 528:	78 8d       	ldd	r23, Y+24	; 0x18
 52a:	ce 01       	movw	r24, r28
 52c:	01 96       	adiw	r24, 0x01	; 1
 52e:	0e 94 a2 02 	call	0x544	; 0x544 <vfprintf>
 532:	ef 81       	ldd	r30, Y+7	; 0x07
 534:	f8 85       	ldd	r31, Y+8	; 0x08
 536:	e0 0f       	add	r30, r16
 538:	f1 1f       	adc	r31, r17
 53a:	10 82       	st	Z, r1
 53c:	2e 96       	adiw	r28, 0x0e	; 14
 53e:	e4 e0       	ldi	r30, 0x04	; 4
 540:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__epilogue_restores__+0x1c>

00000544 <vfprintf>:
 544:	ab e0       	ldi	r26, 0x0B	; 11
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	e8 ea       	ldi	r30, 0xA8	; 168
 54a:	f2 e0       	ldi	r31, 0x02	; 2
 54c:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__prologue_saves__>
 550:	6c 01       	movw	r12, r24
 552:	7b 01       	movw	r14, r22
 554:	8a 01       	movw	r16, r20
 556:	fc 01       	movw	r30, r24
 558:	17 82       	std	Z+7, r1	; 0x07
 55a:	16 82       	std	Z+6, r1	; 0x06
 55c:	83 81       	ldd	r24, Z+3	; 0x03
 55e:	81 ff       	sbrs	r24, 1
 560:	cc c1       	rjmp	.+920    	; 0x8fa <vfprintf+0x3b6>
 562:	ce 01       	movw	r24, r28
 564:	01 96       	adiw	r24, 0x01	; 1
 566:	3c 01       	movw	r6, r24
 568:	f6 01       	movw	r30, r12
 56a:	93 81       	ldd	r25, Z+3	; 0x03
 56c:	f7 01       	movw	r30, r14
 56e:	93 fd       	sbrc	r25, 3
 570:	85 91       	lpm	r24, Z+
 572:	93 ff       	sbrs	r25, 3
 574:	81 91       	ld	r24, Z+
 576:	7f 01       	movw	r14, r30
 578:	88 23       	and	r24, r24
 57a:	09 f4       	brne	.+2      	; 0x57e <vfprintf+0x3a>
 57c:	ba c1       	rjmp	.+884    	; 0x8f2 <vfprintf+0x3ae>
 57e:	85 32       	cpi	r24, 0x25	; 37
 580:	39 f4       	brne	.+14     	; 0x590 <vfprintf+0x4c>
 582:	93 fd       	sbrc	r25, 3
 584:	85 91       	lpm	r24, Z+
 586:	93 ff       	sbrs	r25, 3
 588:	81 91       	ld	r24, Z+
 58a:	7f 01       	movw	r14, r30
 58c:	85 32       	cpi	r24, 0x25	; 37
 58e:	29 f4       	brne	.+10     	; 0x59a <vfprintf+0x56>
 590:	b6 01       	movw	r22, r12
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 598:	e7 cf       	rjmp	.-50     	; 0x568 <vfprintf+0x24>
 59a:	91 2c       	mov	r9, r1
 59c:	21 2c       	mov	r2, r1
 59e:	31 2c       	mov	r3, r1
 5a0:	ff e1       	ldi	r31, 0x1F	; 31
 5a2:	f3 15       	cp	r31, r3
 5a4:	d8 f0       	brcs	.+54     	; 0x5dc <vfprintf+0x98>
 5a6:	8b 32       	cpi	r24, 0x2B	; 43
 5a8:	79 f0       	breq	.+30     	; 0x5c8 <vfprintf+0x84>
 5aa:	38 f4       	brcc	.+14     	; 0x5ba <vfprintf+0x76>
 5ac:	80 32       	cpi	r24, 0x20	; 32
 5ae:	79 f0       	breq	.+30     	; 0x5ce <vfprintf+0x8a>
 5b0:	83 32       	cpi	r24, 0x23	; 35
 5b2:	a1 f4       	brne	.+40     	; 0x5dc <vfprintf+0x98>
 5b4:	23 2d       	mov	r18, r3
 5b6:	20 61       	ori	r18, 0x10	; 16
 5b8:	1d c0       	rjmp	.+58     	; 0x5f4 <vfprintf+0xb0>
 5ba:	8d 32       	cpi	r24, 0x2D	; 45
 5bc:	61 f0       	breq	.+24     	; 0x5d6 <vfprintf+0x92>
 5be:	80 33       	cpi	r24, 0x30	; 48
 5c0:	69 f4       	brne	.+26     	; 0x5dc <vfprintf+0x98>
 5c2:	23 2d       	mov	r18, r3
 5c4:	21 60       	ori	r18, 0x01	; 1
 5c6:	16 c0       	rjmp	.+44     	; 0x5f4 <vfprintf+0xb0>
 5c8:	83 2d       	mov	r24, r3
 5ca:	82 60       	ori	r24, 0x02	; 2
 5cc:	38 2e       	mov	r3, r24
 5ce:	e3 2d       	mov	r30, r3
 5d0:	e4 60       	ori	r30, 0x04	; 4
 5d2:	3e 2e       	mov	r3, r30
 5d4:	2a c0       	rjmp	.+84     	; 0x62a <vfprintf+0xe6>
 5d6:	f3 2d       	mov	r31, r3
 5d8:	f8 60       	ori	r31, 0x08	; 8
 5da:	1d c0       	rjmp	.+58     	; 0x616 <vfprintf+0xd2>
 5dc:	37 fc       	sbrc	r3, 7
 5de:	2d c0       	rjmp	.+90     	; 0x63a <vfprintf+0xf6>
 5e0:	20 ed       	ldi	r18, 0xD0	; 208
 5e2:	28 0f       	add	r18, r24
 5e4:	2a 30       	cpi	r18, 0x0A	; 10
 5e6:	40 f0       	brcs	.+16     	; 0x5f8 <vfprintf+0xb4>
 5e8:	8e 32       	cpi	r24, 0x2E	; 46
 5ea:	b9 f4       	brne	.+46     	; 0x61a <vfprintf+0xd6>
 5ec:	36 fc       	sbrc	r3, 6
 5ee:	81 c1       	rjmp	.+770    	; 0x8f2 <vfprintf+0x3ae>
 5f0:	23 2d       	mov	r18, r3
 5f2:	20 64       	ori	r18, 0x40	; 64
 5f4:	32 2e       	mov	r3, r18
 5f6:	19 c0       	rjmp	.+50     	; 0x62a <vfprintf+0xe6>
 5f8:	36 fe       	sbrs	r3, 6
 5fa:	06 c0       	rjmp	.+12     	; 0x608 <vfprintf+0xc4>
 5fc:	8a e0       	ldi	r24, 0x0A	; 10
 5fe:	98 9e       	mul	r9, r24
 600:	20 0d       	add	r18, r0
 602:	11 24       	eor	r1, r1
 604:	92 2e       	mov	r9, r18
 606:	11 c0       	rjmp	.+34     	; 0x62a <vfprintf+0xe6>
 608:	ea e0       	ldi	r30, 0x0A	; 10
 60a:	2e 9e       	mul	r2, r30
 60c:	20 0d       	add	r18, r0
 60e:	11 24       	eor	r1, r1
 610:	22 2e       	mov	r2, r18
 612:	f3 2d       	mov	r31, r3
 614:	f0 62       	ori	r31, 0x20	; 32
 616:	3f 2e       	mov	r3, r31
 618:	08 c0       	rjmp	.+16     	; 0x62a <vfprintf+0xe6>
 61a:	8c 36       	cpi	r24, 0x6C	; 108
 61c:	21 f4       	brne	.+8      	; 0x626 <vfprintf+0xe2>
 61e:	83 2d       	mov	r24, r3
 620:	80 68       	ori	r24, 0x80	; 128
 622:	38 2e       	mov	r3, r24
 624:	02 c0       	rjmp	.+4      	; 0x62a <vfprintf+0xe6>
 626:	88 36       	cpi	r24, 0x68	; 104
 628:	41 f4       	brne	.+16     	; 0x63a <vfprintf+0xf6>
 62a:	f7 01       	movw	r30, r14
 62c:	93 fd       	sbrc	r25, 3
 62e:	85 91       	lpm	r24, Z+
 630:	93 ff       	sbrs	r25, 3
 632:	81 91       	ld	r24, Z+
 634:	7f 01       	movw	r14, r30
 636:	81 11       	cpse	r24, r1
 638:	b3 cf       	rjmp	.-154    	; 0x5a0 <vfprintf+0x5c>
 63a:	98 2f       	mov	r25, r24
 63c:	9f 7d       	andi	r25, 0xDF	; 223
 63e:	95 54       	subi	r25, 0x45	; 69
 640:	93 30       	cpi	r25, 0x03	; 3
 642:	28 f4       	brcc	.+10     	; 0x64e <vfprintf+0x10a>
 644:	0c 5f       	subi	r16, 0xFC	; 252
 646:	1f 4f       	sbci	r17, 0xFF	; 255
 648:	9f e3       	ldi	r25, 0x3F	; 63
 64a:	99 83       	std	Y+1, r25	; 0x01
 64c:	0d c0       	rjmp	.+26     	; 0x668 <vfprintf+0x124>
 64e:	83 36       	cpi	r24, 0x63	; 99
 650:	31 f0       	breq	.+12     	; 0x65e <vfprintf+0x11a>
 652:	83 37       	cpi	r24, 0x73	; 115
 654:	71 f0       	breq	.+28     	; 0x672 <vfprintf+0x12e>
 656:	83 35       	cpi	r24, 0x53	; 83
 658:	09 f0       	breq	.+2      	; 0x65c <vfprintf+0x118>
 65a:	59 c0       	rjmp	.+178    	; 0x70e <vfprintf+0x1ca>
 65c:	21 c0       	rjmp	.+66     	; 0x6a0 <vfprintf+0x15c>
 65e:	f8 01       	movw	r30, r16
 660:	80 81       	ld	r24, Z
 662:	89 83       	std	Y+1, r24	; 0x01
 664:	0e 5f       	subi	r16, 0xFE	; 254
 666:	1f 4f       	sbci	r17, 0xFF	; 255
 668:	88 24       	eor	r8, r8
 66a:	83 94       	inc	r8
 66c:	91 2c       	mov	r9, r1
 66e:	53 01       	movw	r10, r6
 670:	13 c0       	rjmp	.+38     	; 0x698 <vfprintf+0x154>
 672:	28 01       	movw	r4, r16
 674:	f2 e0       	ldi	r31, 0x02	; 2
 676:	4f 0e       	add	r4, r31
 678:	51 1c       	adc	r5, r1
 67a:	f8 01       	movw	r30, r16
 67c:	a0 80       	ld	r10, Z
 67e:	b1 80       	ldd	r11, Z+1	; 0x01
 680:	36 fe       	sbrs	r3, 6
 682:	03 c0       	rjmp	.+6      	; 0x68a <vfprintf+0x146>
 684:	69 2d       	mov	r22, r9
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	02 c0       	rjmp	.+4      	; 0x68e <vfprintf+0x14a>
 68a:	6f ef       	ldi	r22, 0xFF	; 255
 68c:	7f ef       	ldi	r23, 0xFF	; 255
 68e:	c5 01       	movw	r24, r10
 690:	0e 94 8e 04 	call	0x91c	; 0x91c <strnlen>
 694:	4c 01       	movw	r8, r24
 696:	82 01       	movw	r16, r4
 698:	f3 2d       	mov	r31, r3
 69a:	ff 77       	andi	r31, 0x7F	; 127
 69c:	3f 2e       	mov	r3, r31
 69e:	16 c0       	rjmp	.+44     	; 0x6cc <vfprintf+0x188>
 6a0:	28 01       	movw	r4, r16
 6a2:	22 e0       	ldi	r18, 0x02	; 2
 6a4:	42 0e       	add	r4, r18
 6a6:	51 1c       	adc	r5, r1
 6a8:	f8 01       	movw	r30, r16
 6aa:	a0 80       	ld	r10, Z
 6ac:	b1 80       	ldd	r11, Z+1	; 0x01
 6ae:	36 fe       	sbrs	r3, 6
 6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <vfprintf+0x174>
 6b2:	69 2d       	mov	r22, r9
 6b4:	70 e0       	ldi	r23, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <vfprintf+0x178>
 6b8:	6f ef       	ldi	r22, 0xFF	; 255
 6ba:	7f ef       	ldi	r23, 0xFF	; 255
 6bc:	c5 01       	movw	r24, r10
 6be:	0e 94 83 04 	call	0x906	; 0x906 <strnlen_P>
 6c2:	4c 01       	movw	r8, r24
 6c4:	f3 2d       	mov	r31, r3
 6c6:	f0 68       	ori	r31, 0x80	; 128
 6c8:	3f 2e       	mov	r3, r31
 6ca:	82 01       	movw	r16, r4
 6cc:	33 fc       	sbrc	r3, 3
 6ce:	1b c0       	rjmp	.+54     	; 0x706 <vfprintf+0x1c2>
 6d0:	82 2d       	mov	r24, r2
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	88 16       	cp	r8, r24
 6d6:	99 06       	cpc	r9, r25
 6d8:	b0 f4       	brcc	.+44     	; 0x706 <vfprintf+0x1c2>
 6da:	b6 01       	movw	r22, r12
 6dc:	80 e2       	ldi	r24, 0x20	; 32
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 6e4:	2a 94       	dec	r2
 6e6:	f4 cf       	rjmp	.-24     	; 0x6d0 <vfprintf+0x18c>
 6e8:	f5 01       	movw	r30, r10
 6ea:	37 fc       	sbrc	r3, 7
 6ec:	85 91       	lpm	r24, Z+
 6ee:	37 fe       	sbrs	r3, 7
 6f0:	81 91       	ld	r24, Z+
 6f2:	5f 01       	movw	r10, r30
 6f4:	b6 01       	movw	r22, r12
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 6fc:	21 10       	cpse	r2, r1
 6fe:	2a 94       	dec	r2
 700:	21 e0       	ldi	r18, 0x01	; 1
 702:	82 1a       	sub	r8, r18
 704:	91 08       	sbc	r9, r1
 706:	81 14       	cp	r8, r1
 708:	91 04       	cpc	r9, r1
 70a:	71 f7       	brne	.-36     	; 0x6e8 <vfprintf+0x1a4>
 70c:	e8 c0       	rjmp	.+464    	; 0x8de <vfprintf+0x39a>
 70e:	84 36       	cpi	r24, 0x64	; 100
 710:	11 f0       	breq	.+4      	; 0x716 <vfprintf+0x1d2>
 712:	89 36       	cpi	r24, 0x69	; 105
 714:	41 f5       	brne	.+80     	; 0x766 <vfprintf+0x222>
 716:	f8 01       	movw	r30, r16
 718:	37 fe       	sbrs	r3, 7
 71a:	07 c0       	rjmp	.+14     	; 0x72a <vfprintf+0x1e6>
 71c:	60 81       	ld	r22, Z
 71e:	71 81       	ldd	r23, Z+1	; 0x01
 720:	82 81       	ldd	r24, Z+2	; 0x02
 722:	93 81       	ldd	r25, Z+3	; 0x03
 724:	0c 5f       	subi	r16, 0xFC	; 252
 726:	1f 4f       	sbci	r17, 0xFF	; 255
 728:	08 c0       	rjmp	.+16     	; 0x73a <vfprintf+0x1f6>
 72a:	60 81       	ld	r22, Z
 72c:	71 81       	ldd	r23, Z+1	; 0x01
 72e:	07 2e       	mov	r0, r23
 730:	00 0c       	add	r0, r0
 732:	88 0b       	sbc	r24, r24
 734:	99 0b       	sbc	r25, r25
 736:	0e 5f       	subi	r16, 0xFE	; 254
 738:	1f 4f       	sbci	r17, 0xFF	; 255
 73a:	f3 2d       	mov	r31, r3
 73c:	ff 76       	andi	r31, 0x6F	; 111
 73e:	3f 2e       	mov	r3, r31
 740:	97 ff       	sbrs	r25, 7
 742:	09 c0       	rjmp	.+18     	; 0x756 <vfprintf+0x212>
 744:	90 95       	com	r25
 746:	80 95       	com	r24
 748:	70 95       	com	r23
 74a:	61 95       	neg	r22
 74c:	7f 4f       	sbci	r23, 0xFF	; 255
 74e:	8f 4f       	sbci	r24, 0xFF	; 255
 750:	9f 4f       	sbci	r25, 0xFF	; 255
 752:	f0 68       	ori	r31, 0x80	; 128
 754:	3f 2e       	mov	r3, r31
 756:	2a e0       	ldi	r18, 0x0A	; 10
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	a3 01       	movw	r20, r6
 75c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__ultoa_invert>
 760:	88 2e       	mov	r8, r24
 762:	86 18       	sub	r8, r6
 764:	45 c0       	rjmp	.+138    	; 0x7f0 <vfprintf+0x2ac>
 766:	85 37       	cpi	r24, 0x75	; 117
 768:	31 f4       	brne	.+12     	; 0x776 <vfprintf+0x232>
 76a:	23 2d       	mov	r18, r3
 76c:	2f 7e       	andi	r18, 0xEF	; 239
 76e:	b2 2e       	mov	r11, r18
 770:	2a e0       	ldi	r18, 0x0A	; 10
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	25 c0       	rjmp	.+74     	; 0x7c0 <vfprintf+0x27c>
 776:	93 2d       	mov	r25, r3
 778:	99 7f       	andi	r25, 0xF9	; 249
 77a:	b9 2e       	mov	r11, r25
 77c:	8f 36       	cpi	r24, 0x6F	; 111
 77e:	c1 f0       	breq	.+48     	; 0x7b0 <vfprintf+0x26c>
 780:	18 f4       	brcc	.+6      	; 0x788 <vfprintf+0x244>
 782:	88 35       	cpi	r24, 0x58	; 88
 784:	79 f0       	breq	.+30     	; 0x7a4 <vfprintf+0x260>
 786:	b5 c0       	rjmp	.+362    	; 0x8f2 <vfprintf+0x3ae>
 788:	80 37       	cpi	r24, 0x70	; 112
 78a:	19 f0       	breq	.+6      	; 0x792 <vfprintf+0x24e>
 78c:	88 37       	cpi	r24, 0x78	; 120
 78e:	21 f0       	breq	.+8      	; 0x798 <vfprintf+0x254>
 790:	b0 c0       	rjmp	.+352    	; 0x8f2 <vfprintf+0x3ae>
 792:	e9 2f       	mov	r30, r25
 794:	e0 61       	ori	r30, 0x10	; 16
 796:	be 2e       	mov	r11, r30
 798:	b4 fe       	sbrs	r11, 4
 79a:	0d c0       	rjmp	.+26     	; 0x7b6 <vfprintf+0x272>
 79c:	fb 2d       	mov	r31, r11
 79e:	f4 60       	ori	r31, 0x04	; 4
 7a0:	bf 2e       	mov	r11, r31
 7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <vfprintf+0x272>
 7a4:	34 fe       	sbrs	r3, 4
 7a6:	0a c0       	rjmp	.+20     	; 0x7bc <vfprintf+0x278>
 7a8:	29 2f       	mov	r18, r25
 7aa:	26 60       	ori	r18, 0x06	; 6
 7ac:	b2 2e       	mov	r11, r18
 7ae:	06 c0       	rjmp	.+12     	; 0x7bc <vfprintf+0x278>
 7b0:	28 e0       	ldi	r18, 0x08	; 8
 7b2:	30 e0       	ldi	r19, 0x00	; 0
 7b4:	05 c0       	rjmp	.+10     	; 0x7c0 <vfprintf+0x27c>
 7b6:	20 e1       	ldi	r18, 0x10	; 16
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <vfprintf+0x27c>
 7bc:	20 e1       	ldi	r18, 0x10	; 16
 7be:	32 e0       	ldi	r19, 0x02	; 2
 7c0:	f8 01       	movw	r30, r16
 7c2:	b7 fe       	sbrs	r11, 7
 7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <vfprintf+0x290>
 7c6:	60 81       	ld	r22, Z
 7c8:	71 81       	ldd	r23, Z+1	; 0x01
 7ca:	82 81       	ldd	r24, Z+2	; 0x02
 7cc:	93 81       	ldd	r25, Z+3	; 0x03
 7ce:	0c 5f       	subi	r16, 0xFC	; 252
 7d0:	1f 4f       	sbci	r17, 0xFF	; 255
 7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <vfprintf+0x29c>
 7d4:	60 81       	ld	r22, Z
 7d6:	71 81       	ldd	r23, Z+1	; 0x01
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	0e 5f       	subi	r16, 0xFE	; 254
 7de:	1f 4f       	sbci	r17, 0xFF	; 255
 7e0:	a3 01       	movw	r20, r6
 7e2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__ultoa_invert>
 7e6:	88 2e       	mov	r8, r24
 7e8:	86 18       	sub	r8, r6
 7ea:	fb 2d       	mov	r31, r11
 7ec:	ff 77       	andi	r31, 0x7F	; 127
 7ee:	3f 2e       	mov	r3, r31
 7f0:	36 fe       	sbrs	r3, 6
 7f2:	0d c0       	rjmp	.+26     	; 0x80e <vfprintf+0x2ca>
 7f4:	23 2d       	mov	r18, r3
 7f6:	2e 7f       	andi	r18, 0xFE	; 254
 7f8:	a2 2e       	mov	r10, r18
 7fa:	89 14       	cp	r8, r9
 7fc:	58 f4       	brcc	.+22     	; 0x814 <vfprintf+0x2d0>
 7fe:	34 fe       	sbrs	r3, 4
 800:	0b c0       	rjmp	.+22     	; 0x818 <vfprintf+0x2d4>
 802:	32 fc       	sbrc	r3, 2
 804:	09 c0       	rjmp	.+18     	; 0x818 <vfprintf+0x2d4>
 806:	83 2d       	mov	r24, r3
 808:	8e 7e       	andi	r24, 0xEE	; 238
 80a:	a8 2e       	mov	r10, r24
 80c:	05 c0       	rjmp	.+10     	; 0x818 <vfprintf+0x2d4>
 80e:	b8 2c       	mov	r11, r8
 810:	a3 2c       	mov	r10, r3
 812:	03 c0       	rjmp	.+6      	; 0x81a <vfprintf+0x2d6>
 814:	b8 2c       	mov	r11, r8
 816:	01 c0       	rjmp	.+2      	; 0x81a <vfprintf+0x2d6>
 818:	b9 2c       	mov	r11, r9
 81a:	a4 fe       	sbrs	r10, 4
 81c:	0f c0       	rjmp	.+30     	; 0x83c <vfprintf+0x2f8>
 81e:	fe 01       	movw	r30, r28
 820:	e8 0d       	add	r30, r8
 822:	f1 1d       	adc	r31, r1
 824:	80 81       	ld	r24, Z
 826:	80 33       	cpi	r24, 0x30	; 48
 828:	21 f4       	brne	.+8      	; 0x832 <vfprintf+0x2ee>
 82a:	9a 2d       	mov	r25, r10
 82c:	99 7e       	andi	r25, 0xE9	; 233
 82e:	a9 2e       	mov	r10, r25
 830:	09 c0       	rjmp	.+18     	; 0x844 <vfprintf+0x300>
 832:	a2 fe       	sbrs	r10, 2
 834:	06 c0       	rjmp	.+12     	; 0x842 <vfprintf+0x2fe>
 836:	b3 94       	inc	r11
 838:	b3 94       	inc	r11
 83a:	04 c0       	rjmp	.+8      	; 0x844 <vfprintf+0x300>
 83c:	8a 2d       	mov	r24, r10
 83e:	86 78       	andi	r24, 0x86	; 134
 840:	09 f0       	breq	.+2      	; 0x844 <vfprintf+0x300>
 842:	b3 94       	inc	r11
 844:	a3 fc       	sbrc	r10, 3
 846:	11 c0       	rjmp	.+34     	; 0x86a <vfprintf+0x326>
 848:	a0 fe       	sbrs	r10, 0
 84a:	06 c0       	rjmp	.+12     	; 0x858 <vfprintf+0x314>
 84c:	b2 14       	cp	r11, r2
 84e:	88 f4       	brcc	.+34     	; 0x872 <vfprintf+0x32e>
 850:	28 0c       	add	r2, r8
 852:	92 2c       	mov	r9, r2
 854:	9b 18       	sub	r9, r11
 856:	0e c0       	rjmp	.+28     	; 0x874 <vfprintf+0x330>
 858:	b2 14       	cp	r11, r2
 85a:	60 f4       	brcc	.+24     	; 0x874 <vfprintf+0x330>
 85c:	b6 01       	movw	r22, r12
 85e:	80 e2       	ldi	r24, 0x20	; 32
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 866:	b3 94       	inc	r11
 868:	f7 cf       	rjmp	.-18     	; 0x858 <vfprintf+0x314>
 86a:	b2 14       	cp	r11, r2
 86c:	18 f4       	brcc	.+6      	; 0x874 <vfprintf+0x330>
 86e:	2b 18       	sub	r2, r11
 870:	02 c0       	rjmp	.+4      	; 0x876 <vfprintf+0x332>
 872:	98 2c       	mov	r9, r8
 874:	21 2c       	mov	r2, r1
 876:	a4 fe       	sbrs	r10, 4
 878:	10 c0       	rjmp	.+32     	; 0x89a <vfprintf+0x356>
 87a:	b6 01       	movw	r22, r12
 87c:	80 e3       	ldi	r24, 0x30	; 48
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 884:	a2 fe       	sbrs	r10, 2
 886:	17 c0       	rjmp	.+46     	; 0x8b6 <vfprintf+0x372>
 888:	a1 fc       	sbrc	r10, 1
 88a:	03 c0       	rjmp	.+6      	; 0x892 <vfprintf+0x34e>
 88c:	88 e7       	ldi	r24, 0x78	; 120
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	02 c0       	rjmp	.+4      	; 0x896 <vfprintf+0x352>
 892:	88 e5       	ldi	r24, 0x58	; 88
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	b6 01       	movw	r22, r12
 898:	0c c0       	rjmp	.+24     	; 0x8b2 <vfprintf+0x36e>
 89a:	8a 2d       	mov	r24, r10
 89c:	86 78       	andi	r24, 0x86	; 134
 89e:	59 f0       	breq	.+22     	; 0x8b6 <vfprintf+0x372>
 8a0:	a1 fe       	sbrs	r10, 1
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <vfprintf+0x364>
 8a4:	8b e2       	ldi	r24, 0x2B	; 43
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <vfprintf+0x366>
 8a8:	80 e2       	ldi	r24, 0x20	; 32
 8aa:	a7 fc       	sbrc	r10, 7
 8ac:	8d e2       	ldi	r24, 0x2D	; 45
 8ae:	b6 01       	movw	r22, r12
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 8b6:	89 14       	cp	r8, r9
 8b8:	38 f4       	brcc	.+14     	; 0x8c8 <vfprintf+0x384>
 8ba:	b6 01       	movw	r22, r12
 8bc:	80 e3       	ldi	r24, 0x30	; 48
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 8c4:	9a 94       	dec	r9
 8c6:	f7 cf       	rjmp	.-18     	; 0x8b6 <vfprintf+0x372>
 8c8:	8a 94       	dec	r8
 8ca:	f3 01       	movw	r30, r6
 8cc:	e8 0d       	add	r30, r8
 8ce:	f1 1d       	adc	r31, r1
 8d0:	80 81       	ld	r24, Z
 8d2:	b6 01       	movw	r22, r12
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 8da:	81 10       	cpse	r8, r1
 8dc:	f5 cf       	rjmp	.-22     	; 0x8c8 <vfprintf+0x384>
 8de:	22 20       	and	r2, r2
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <vfprintf+0x3a0>
 8e2:	42 ce       	rjmp	.-892    	; 0x568 <vfprintf+0x24>
 8e4:	b6 01       	movw	r22, r12
 8e6:	80 e2       	ldi	r24, 0x20	; 32
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 8ee:	2a 94       	dec	r2
 8f0:	f6 cf       	rjmp	.-20     	; 0x8de <vfprintf+0x39a>
 8f2:	f6 01       	movw	r30, r12
 8f4:	86 81       	ldd	r24, Z+6	; 0x06
 8f6:	97 81       	ldd	r25, Z+7	; 0x07
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <vfprintf+0x3ba>
 8fa:	8f ef       	ldi	r24, 0xFF	; 255
 8fc:	9f ef       	ldi	r25, 0xFF	; 255
 8fe:	2b 96       	adiw	r28, 0x0b	; 11
 900:	e2 e1       	ldi	r30, 0x12	; 18
 902:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__epilogue_restores__>

00000906 <strnlen_P>:
 906:	fc 01       	movw	r30, r24
 908:	05 90       	lpm	r0, Z+
 90a:	61 50       	subi	r22, 0x01	; 1
 90c:	70 40       	sbci	r23, 0x00	; 0
 90e:	01 10       	cpse	r0, r1
 910:	d8 f7       	brcc	.-10     	; 0x908 <strnlen_P+0x2>
 912:	80 95       	com	r24
 914:	90 95       	com	r25
 916:	8e 0f       	add	r24, r30
 918:	9f 1f       	adc	r25, r31
 91a:	08 95       	ret

0000091c <strnlen>:
 91c:	fc 01       	movw	r30, r24
 91e:	61 50       	subi	r22, 0x01	; 1
 920:	70 40       	sbci	r23, 0x00	; 0
 922:	01 90       	ld	r0, Z+
 924:	01 10       	cpse	r0, r1
 926:	d8 f7       	brcc	.-10     	; 0x91e <strnlen+0x2>
 928:	80 95       	com	r24
 92a:	90 95       	com	r25
 92c:	8e 0f       	add	r24, r30
 92e:	9f 1f       	adc	r25, r31
 930:	08 95       	ret

00000932 <fputc>:
 932:	0f 93       	push	r16
 934:	1f 93       	push	r17
 936:	cf 93       	push	r28
 938:	df 93       	push	r29
 93a:	fb 01       	movw	r30, r22
 93c:	23 81       	ldd	r18, Z+3	; 0x03
 93e:	21 fd       	sbrc	r18, 1
 940:	03 c0       	rjmp	.+6      	; 0x948 <fputc+0x16>
 942:	8f ef       	ldi	r24, 0xFF	; 255
 944:	9f ef       	ldi	r25, 0xFF	; 255
 946:	2c c0       	rjmp	.+88     	; 0x9a0 <fputc+0x6e>
 948:	22 ff       	sbrs	r18, 2
 94a:	16 c0       	rjmp	.+44     	; 0x978 <fputc+0x46>
 94c:	46 81       	ldd	r20, Z+6	; 0x06
 94e:	57 81       	ldd	r21, Z+7	; 0x07
 950:	24 81       	ldd	r18, Z+4	; 0x04
 952:	35 81       	ldd	r19, Z+5	; 0x05
 954:	42 17       	cp	r20, r18
 956:	53 07       	cpc	r21, r19
 958:	44 f4       	brge	.+16     	; 0x96a <fputc+0x38>
 95a:	a0 81       	ld	r26, Z
 95c:	b1 81       	ldd	r27, Z+1	; 0x01
 95e:	9d 01       	movw	r18, r26
 960:	2f 5f       	subi	r18, 0xFF	; 255
 962:	3f 4f       	sbci	r19, 0xFF	; 255
 964:	31 83       	std	Z+1, r19	; 0x01
 966:	20 83       	st	Z, r18
 968:	8c 93       	st	X, r24
 96a:	26 81       	ldd	r18, Z+6	; 0x06
 96c:	37 81       	ldd	r19, Z+7	; 0x07
 96e:	2f 5f       	subi	r18, 0xFF	; 255
 970:	3f 4f       	sbci	r19, 0xFF	; 255
 972:	37 83       	std	Z+7, r19	; 0x07
 974:	26 83       	std	Z+6, r18	; 0x06
 976:	14 c0       	rjmp	.+40     	; 0x9a0 <fputc+0x6e>
 978:	8b 01       	movw	r16, r22
 97a:	ec 01       	movw	r28, r24
 97c:	fb 01       	movw	r30, r22
 97e:	00 84       	ldd	r0, Z+8	; 0x08
 980:	f1 85       	ldd	r31, Z+9	; 0x09
 982:	e0 2d       	mov	r30, r0
 984:	09 95       	icall
 986:	89 2b       	or	r24, r25
 988:	e1 f6       	brne	.-72     	; 0x942 <fputc+0x10>
 98a:	d8 01       	movw	r26, r16
 98c:	16 96       	adiw	r26, 0x06	; 6
 98e:	8d 91       	ld	r24, X+
 990:	9c 91       	ld	r25, X
 992:	17 97       	sbiw	r26, 0x07	; 7
 994:	01 96       	adiw	r24, 0x01	; 1
 996:	17 96       	adiw	r26, 0x07	; 7
 998:	9c 93       	st	X, r25
 99a:	8e 93       	st	-X, r24
 99c:	16 97       	sbiw	r26, 0x06	; 6
 99e:	ce 01       	movw	r24, r28
 9a0:	df 91       	pop	r29
 9a2:	cf 91       	pop	r28
 9a4:	1f 91       	pop	r17
 9a6:	0f 91       	pop	r16
 9a8:	08 95       	ret

000009aa <__ultoa_invert>:
 9aa:	fa 01       	movw	r30, r20
 9ac:	aa 27       	eor	r26, r26
 9ae:	28 30       	cpi	r18, 0x08	; 8
 9b0:	51 f1       	breq	.+84     	; 0xa06 <__ultoa_invert+0x5c>
 9b2:	20 31       	cpi	r18, 0x10	; 16
 9b4:	81 f1       	breq	.+96     	; 0xa16 <__ultoa_invert+0x6c>
 9b6:	e8 94       	clt
 9b8:	6f 93       	push	r22
 9ba:	6e 7f       	andi	r22, 0xFE	; 254
 9bc:	6e 5f       	subi	r22, 0xFE	; 254
 9be:	7f 4f       	sbci	r23, 0xFF	; 255
 9c0:	8f 4f       	sbci	r24, 0xFF	; 255
 9c2:	9f 4f       	sbci	r25, 0xFF	; 255
 9c4:	af 4f       	sbci	r26, 0xFF	; 255
 9c6:	b1 e0       	ldi	r27, 0x01	; 1
 9c8:	3e d0       	rcall	.+124    	; 0xa46 <__ultoa_invert+0x9c>
 9ca:	b4 e0       	ldi	r27, 0x04	; 4
 9cc:	3c d0       	rcall	.+120    	; 0xa46 <__ultoa_invert+0x9c>
 9ce:	67 0f       	add	r22, r23
 9d0:	78 1f       	adc	r23, r24
 9d2:	89 1f       	adc	r24, r25
 9d4:	9a 1f       	adc	r25, r26
 9d6:	a1 1d       	adc	r26, r1
 9d8:	68 0f       	add	r22, r24
 9da:	79 1f       	adc	r23, r25
 9dc:	8a 1f       	adc	r24, r26
 9de:	91 1d       	adc	r25, r1
 9e0:	a1 1d       	adc	r26, r1
 9e2:	6a 0f       	add	r22, r26
 9e4:	71 1d       	adc	r23, r1
 9e6:	81 1d       	adc	r24, r1
 9e8:	91 1d       	adc	r25, r1
 9ea:	a1 1d       	adc	r26, r1
 9ec:	20 d0       	rcall	.+64     	; 0xa2e <__ultoa_invert+0x84>
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <__ultoa_invert+0x48>
 9f0:	68 94       	set
 9f2:	3f 91       	pop	r19
 9f4:	2a e0       	ldi	r18, 0x0A	; 10
 9f6:	26 9f       	mul	r18, r22
 9f8:	11 24       	eor	r1, r1
 9fa:	30 19       	sub	r19, r0
 9fc:	30 5d       	subi	r19, 0xD0	; 208
 9fe:	31 93       	st	Z+, r19
 a00:	de f6       	brtc	.-74     	; 0x9b8 <__ultoa_invert+0xe>
 a02:	cf 01       	movw	r24, r30
 a04:	08 95       	ret
 a06:	46 2f       	mov	r20, r22
 a08:	47 70       	andi	r20, 0x07	; 7
 a0a:	40 5d       	subi	r20, 0xD0	; 208
 a0c:	41 93       	st	Z+, r20
 a0e:	b3 e0       	ldi	r27, 0x03	; 3
 a10:	0f d0       	rcall	.+30     	; 0xa30 <__ultoa_invert+0x86>
 a12:	c9 f7       	brne	.-14     	; 0xa06 <__ultoa_invert+0x5c>
 a14:	f6 cf       	rjmp	.-20     	; 0xa02 <__ultoa_invert+0x58>
 a16:	46 2f       	mov	r20, r22
 a18:	4f 70       	andi	r20, 0x0F	; 15
 a1a:	40 5d       	subi	r20, 0xD0	; 208
 a1c:	4a 33       	cpi	r20, 0x3A	; 58
 a1e:	18 f0       	brcs	.+6      	; 0xa26 <__ultoa_invert+0x7c>
 a20:	49 5d       	subi	r20, 0xD9	; 217
 a22:	31 fd       	sbrc	r19, 1
 a24:	40 52       	subi	r20, 0x20	; 32
 a26:	41 93       	st	Z+, r20
 a28:	02 d0       	rcall	.+4      	; 0xa2e <__ultoa_invert+0x84>
 a2a:	a9 f7       	brne	.-22     	; 0xa16 <__ultoa_invert+0x6c>
 a2c:	ea cf       	rjmp	.-44     	; 0xa02 <__ultoa_invert+0x58>
 a2e:	b4 e0       	ldi	r27, 0x04	; 4
 a30:	a6 95       	lsr	r26
 a32:	97 95       	ror	r25
 a34:	87 95       	ror	r24
 a36:	77 95       	ror	r23
 a38:	67 95       	ror	r22
 a3a:	ba 95       	dec	r27
 a3c:	c9 f7       	brne	.-14     	; 0xa30 <__ultoa_invert+0x86>
 a3e:	00 97       	sbiw	r24, 0x00	; 0
 a40:	61 05       	cpc	r22, r1
 a42:	71 05       	cpc	r23, r1
 a44:	08 95       	ret
 a46:	9b 01       	movw	r18, r22
 a48:	ac 01       	movw	r20, r24
 a4a:	0a 2e       	mov	r0, r26
 a4c:	06 94       	lsr	r0
 a4e:	57 95       	ror	r21
 a50:	47 95       	ror	r20
 a52:	37 95       	ror	r19
 a54:	27 95       	ror	r18
 a56:	ba 95       	dec	r27
 a58:	c9 f7       	brne	.-14     	; 0xa4c <__ultoa_invert+0xa2>
 a5a:	62 0f       	add	r22, r18
 a5c:	73 1f       	adc	r23, r19
 a5e:	84 1f       	adc	r24, r20
 a60:	95 1f       	adc	r25, r21
 a62:	a0 1d       	adc	r26, r0
 a64:	08 95       	ret

00000a66 <__prologue_saves__>:
 a66:	2f 92       	push	r2
 a68:	3f 92       	push	r3
 a6a:	4f 92       	push	r4
 a6c:	5f 92       	push	r5
 a6e:	6f 92       	push	r6
 a70:	7f 92       	push	r7
 a72:	8f 92       	push	r8
 a74:	9f 92       	push	r9
 a76:	af 92       	push	r10
 a78:	bf 92       	push	r11
 a7a:	cf 92       	push	r12
 a7c:	df 92       	push	r13
 a7e:	ef 92       	push	r14
 a80:	ff 92       	push	r15
 a82:	0f 93       	push	r16
 a84:	1f 93       	push	r17
 a86:	cf 93       	push	r28
 a88:	df 93       	push	r29
 a8a:	cd b7       	in	r28, 0x3d	; 61
 a8c:	de b7       	in	r29, 0x3e	; 62
 a8e:	ca 1b       	sub	r28, r26
 a90:	db 0b       	sbc	r29, r27
 a92:	0f b6       	in	r0, 0x3f	; 63
 a94:	f8 94       	cli
 a96:	de bf       	out	0x3e, r29	; 62
 a98:	0f be       	out	0x3f, r0	; 63
 a9a:	cd bf       	out	0x3d, r28	; 61
 a9c:	09 94       	ijmp

00000a9e <__epilogue_restores__>:
 a9e:	2a 88       	ldd	r2, Y+18	; 0x12
 aa0:	39 88       	ldd	r3, Y+17	; 0x11
 aa2:	48 88       	ldd	r4, Y+16	; 0x10
 aa4:	5f 84       	ldd	r5, Y+15	; 0x0f
 aa6:	6e 84       	ldd	r6, Y+14	; 0x0e
 aa8:	7d 84       	ldd	r7, Y+13	; 0x0d
 aaa:	8c 84       	ldd	r8, Y+12	; 0x0c
 aac:	9b 84       	ldd	r9, Y+11	; 0x0b
 aae:	aa 84       	ldd	r10, Y+10	; 0x0a
 ab0:	b9 84       	ldd	r11, Y+9	; 0x09
 ab2:	c8 84       	ldd	r12, Y+8	; 0x08
 ab4:	df 80       	ldd	r13, Y+7	; 0x07
 ab6:	ee 80       	ldd	r14, Y+6	; 0x06
 ab8:	fd 80       	ldd	r15, Y+5	; 0x05
 aba:	0c 81       	ldd	r16, Y+4	; 0x04
 abc:	1b 81       	ldd	r17, Y+3	; 0x03
 abe:	aa 81       	ldd	r26, Y+2	; 0x02
 ac0:	b9 81       	ldd	r27, Y+1	; 0x01
 ac2:	ce 0f       	add	r28, r30
 ac4:	d1 1d       	adc	r29, r1
 ac6:	0f b6       	in	r0, 0x3f	; 63
 ac8:	f8 94       	cli
 aca:	de bf       	out	0x3e, r29	; 62
 acc:	0f be       	out	0x3f, r0	; 63
 ace:	cd bf       	out	0x3d, r28	; 61
 ad0:	ed 01       	movw	r28, r26
 ad2:	08 95       	ret

00000ad4 <_exit>:
 ad4:	f8 94       	cli

00000ad6 <__stop_program>:
 ad6:	ff cf       	rjmp	.-2      	; 0xad6 <__stop_program>
