
URS_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  000005c8  0000063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001227  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000097e  00000000  00000000  00001a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000955  00000000  00000000  0000238d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  00002ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d1  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a46  00000000  00000000  000033c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003e07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3c       	cpi	r26, 0xC8	; 200
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6d 00 	call	0xda	; 0xda <main>
  7a:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <usart_init>:
	//  7 BIT TRANSFER
	//  2 STOP BITS
	
	unsigned int ubrr = 95;
	
	UBRRH = (ubrr>>8);
  82:	10 bc       	out	0x20, r1	; 32
	UBRRL = (ubrr);
  84:	8f e5       	ldi	r24, 0x5F	; 95
  86:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UPM0) | (1 << UPM1) | (1 << USBS);
  88:	8c eb       	ldi	r24, 0xBC	; 188
  8a:	80 bd       	out	0x20, r24	; 32
	UCSRB = (1 << TXEN) | (1 << RXEN);
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
  90:	08 95       	ret

00000092 <detectReaderVersion>:
}

void detectReaderVersion() {
  92:	cf 93       	push	r28
	//check version of the reader
	uint8_t byte = mfrc522_read(VersionReg);
  94:	87 e3       	ldi	r24, 0x37	; 55
  96:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mfrc522_read>
  9a:	c8 2f       	mov	r28, r24
	
	if (byte == 0x92) {
  9c:	82 39       	cpi	r24, 0x92	; 146
  9e:	49 f4       	brne	.+18     	; 0xb2 <detectReaderVersion+0x20>
		usart_puts("Reader detected ");
  a0:	80 e6       	ldi	r24, 0x60	; 96
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 b9 02 	call	0x572	; 0x572 <usart_puts>
		usart_puts("MIFARE RC522 v2\n");
  a8:	81 e7       	ldi	r24, 0x71	; 113
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 b9 02 	call	0x572	; 0x572 <usart_puts>
  b0:	12 c0       	rjmp	.+36     	; 0xd6 <detectReaderVersion+0x44>

		} else if (byte == 0x91 || byte==0x90) {
  b2:	80 e7       	ldi	r24, 0x70	; 112
  b4:	8c 0f       	add	r24, r28
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	48 f4       	brcc	.+18     	; 0xcc <detectReaderVersion+0x3a>
		usart_puts("Reader detected ");
  ba:	80 e6       	ldi	r24, 0x60	; 96
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 b9 02 	call	0x572	; 0x572 <usart_puts>
		usart_puts("MIFARE RC522v1\n");
  c2:	82 e8       	ldi	r24, 0x82	; 130
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 b9 02 	call	0x572	; 0x572 <usart_puts>
  ca:	05 c0       	rjmp	.+10     	; 0xd6 <detectReaderVersion+0x44>
		} else {
		usart_puts("No reader found\n");
  cc:	82 e9       	ldi	r24, 0x92	; 146
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 b9 02 	call	0x572	; 0x572 <usart_puts>
		PORTA = byte;
  d4:	cb bb       	out	0x1b, r28	; 27
	}
}
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <main>:

int main()
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	60 97       	sbiw	r28, 0x10	; 16
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	8f e1       	ldi	r24, 0x1F	; 31
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x1a>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x24>
  fe:	00 00       	nop
	uint8_t str[16];
	// used for storing status after communication with the reader
	uint8_t status;
	
	_delay_ms(50);
	usart_init();
 100:	0e 94 41 00 	call	0x82	; 0x82 <usart_init>
	
	spi_init();
 104:	0e 94 a3 02 	call	0x546	; 0x546 <spi_init>
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	97 e4       	ldi	r25, 0x47	; 71
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x32>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x38>
 112:	00 00       	nop
	_delay_ms(10);
	
	mfrc522_init();
 114:	0e 94 0d 01 	call	0x21a	; 0x21a <mfrc522_init>
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	97 e4       	ldi	r25, 0x47	; 71
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x42>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x48>
 122:	00 00       	nop
	_delay_ms(10);
	
	detectReaderVersion();
 124:	0e 94 49 00 	call	0x92	; 0x92 <detectReaderVersion>
 128:	9f ef       	ldi	r25, 0xFF	; 255
 12a:	2f e7       	ldi	r18, 0x7F	; 127
 12c:	83 e4       	ldi	r24, 0x43	; 67
 12e:	91 50       	subi	r25, 0x01	; 1
 130:	20 40       	sbci	r18, 0x00	; 0
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x54>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x5e>
 138:	00 00       	nop
	_delay_ms(3000);
	
	char buffer[64];
	while(1){
		// request information about any tag in range of the antenna
		status = mfrc522_request(PICC_REQALL,str);
 13a:	be 01       	movw	r22, r28
 13c:	6f 5f       	subi	r22, 0xFF	; 255
 13e:	7f 4f       	sbci	r23, 0xFF	; 255
 140:	82 e5       	ldi	r24, 0x52	; 82
 142:	0e 94 32 02 	call	0x464	; 0x464 <mfrc522_request>
 146:	18 2f       	mov	r17, r24
		usart_puts("Waiting...\n");
 148:	83 ea       	ldi	r24, 0xA3	; 163
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 b9 02 	call	0x572	; 0x572 <usart_puts>
		
		if(status == CARD_FOUND) {
 150:	11 30       	cpi	r17, 0x01	; 1
 152:	51 f5       	brne	.+84     	; 0x1a8 <main+0xce>
			// if card is found, try to fetch card id number
			status = mfrc522_get_card_serial(str);
 154:	ce 01       	movw	r24, r28
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	0e 94 67 02 	call	0x4ce	; 0x4ce <mfrc522_get_card_serial>
			
			if(status == CARD_FOUND) {
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	b9 f4       	brne	.+46     	; 0x18e <main+0xb4>
				// send id number (as hex characters) through USART interface
				usart_puts(":");
 160:	8f ea       	ldi	r24, 0xAF	; 175
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 b9 02 	call	0x572	; 0x572 <usart_puts>
				for(uint8_t i = 0; i < 5; ++i) {
 168:	10 e0       	ldi	r17, 0x00	; 0
 16a:	0a c0       	rjmp	.+20     	; 0x180 <main+0xa6>
					usart_hex(str[i]);
 16c:	e1 e0       	ldi	r30, 0x01	; 1
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	ec 0f       	add	r30, r28
 172:	fd 1f       	adc	r31, r29
 174:	e1 0f       	add	r30, r17
 176:	f1 1d       	adc	r31, r1
 178:	80 81       	ld	r24, Z
 17a:	0e 94 c6 02 	call	0x58c	; 0x58c <usart_hex>
			status = mfrc522_get_card_serial(str);
			
			if(status == CARD_FOUND) {
				// send id number (as hex characters) through USART interface
				usart_puts(":");
				for(uint8_t i = 0; i < 5; ++i) {
 17e:	1f 5f       	subi	r17, 0xFF	; 255
 180:	15 30       	cpi	r17, 0x05	; 5
 182:	a0 f3       	brcs	.-24     	; 0x16c <main+0x92>
					usart_hex(str[i]);
				}
				usart_puts("\n");
 184:	86 ec       	ldi	r24, 0xC6	; 198
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 b9 02 	call	0x572	; 0x572 <usart_puts>
 18c:	04 c0       	rjmp	.+8      	; 0x196 <main+0xbc>
			}
			else {
				usart_puts("Error reading serial!\n");
 18e:	81 eb       	ldi	r24, 0xB1	; 177
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 b9 02 	call	0x572	; 0x572 <usart_puts>
 196:	9f ef       	ldi	r25, 0xFF	; 255
 198:	2f e3       	ldi	r18, 0x3F	; 63
 19a:	88 e3       	ldi	r24, 0x38	; 56
 19c:	91 50       	subi	r25, 0x01	; 1
 19e:	20 40       	sbci	r18, 0x00	; 0
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0xc2>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0xcc>
 1a6:	00 00       	nop
 1a8:	9f ef       	ldi	r25, 0xFF	; 255
 1aa:	2f e7       	ldi	r18, 0x7F	; 127
 1ac:	86 e1       	ldi	r24, 0x16	; 22
 1ae:	91 50       	subi	r25, 0x01	; 1
 1b0:	20 40       	sbci	r18, 0x00	; 0
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0xd4>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0xde>
 1b8:	00 00       	nop
 1ba:	bf cf       	rjmp	.-130    	; 0x13a <main+0x60>

000001bc <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 1bc:	cf 93       	push	r28
 1be:	c6 2f       	mov	r28, r22
	SS_ENABLE();
 1c0:	98 b3       	in	r25, 0x18	; 24
 1c2:	9f 7e       	andi	r25, 0xEF	; 239
 1c4:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	96 ef       	ldi	r25, 0xF6	; 246
 1c8:	9a 95       	dec	r25
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <mfrc522_write+0xc>
	_delay_us(100);
	spi_transmit((reg<<1)&0x7E);
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	8e 77       	andi	r24, 0x7E	; 126
 1d4:	0e 94 b0 02 	call	0x560	; 0x560 <spi_transmit>
	spi_transmit(data);
 1d8:	8c 2f       	mov	r24, r28
 1da:	0e 94 b0 02 	call	0x560	; 0x560 <spi_transmit>
	SS_DISABLE();
 1de:	88 b3       	in	r24, 0x18	; 24
 1e0:	80 61       	ori	r24, 0x10	; 16
 1e2:	88 bb       	out	0x18, r24	; 24
}
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	SS_ENABLE();
 1e8:	98 b3       	in	r25, 0x18	; 24
 1ea:	9f 7e       	andi	r25, 0xEF	; 239
 1ec:	98 bb       	out	0x18, r25	; 24
 1ee:	96 ef       	ldi	r25, 0xF6	; 246
 1f0:	9a 95       	dec	r25
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <mfrc522_read+0x8>
	_delay_us(100);
	spi_transmit(((reg<<1)&0x7E)|0x80);
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	8e 77       	andi	r24, 0x7E	; 126
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	0e 94 b0 02 	call	0x560	; 0x560 <spi_transmit>
	data = spi_transmit(0x00);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 b0 02 	call	0x560	; 0x560 <spi_transmit>
	SS_DISABLE();
 208:	98 b3       	in	r25, 0x18	; 24
 20a:	90 61       	ori	r25, 0x10	; 16
 20c:	98 bb       	out	0x18, r25	; 24
	return data;
}
 20e:	08 95       	ret

00000210 <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
 210:	6f e0       	ldi	r22, 0x0F	; 15
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
 218:	08 95       	ret

0000021a <mfrc522_init>:


void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 21a:	0e 94 08 01 	call	0x210	; 0x210 <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 21e:	6d e8       	ldi	r22, 0x8D	; 141
 220:	8a e2       	ldi	r24, 0x2A	; 42
 222:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
 226:	6e e3       	ldi	r22, 0x3E	; 62
 228:	8b e2       	ldi	r24, 0x2B	; 43
 22a:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
 22e:	6e e1       	ldi	r22, 0x1E	; 30
 230:	8c e2       	ldi	r24, 0x2C	; 44
 232:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	8d e2       	ldi	r24, 0x2D	; 45
 23a:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 23e:	60 e4       	ldi	r22, 0x40	; 64
 240:	85 e1       	ldi	r24, 0x15	; 21
 242:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
 246:	6d e3       	ldi	r22, 0x3D	; 61
 248:	81 e1       	ldi	r24, 0x11	; 17
 24a:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
 24e:	84 e1       	ldi	r24, 0x14	; 20
 250:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mfrc522_read>
	if(!(byte&0x03))
 254:	98 2f       	mov	r25, r24
 256:	93 70       	andi	r25, 0x03	; 3
 258:	29 f4       	brne	.+10     	; 0x264 <mfrc522_init+0x4a>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 25a:	68 2f       	mov	r22, r24
 25c:	63 60       	ori	r22, 0x03	; 3
 25e:	84 e1       	ldi	r24, 0x14	; 20
 260:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
 264:	08 95       	ret

00000266 <mfrc522_to_card>:
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 266:	4f 92       	push	r4
 268:	5f 92       	push	r5
 26a:	6f 92       	push	r6
 26c:	7f 92       	push	r7
 26e:	8f 92       	push	r8
 270:	9f 92       	push	r9
 272:	af 92       	push	r10
 274:	bf 92       	push	r11
 276:	cf 92       	push	r12
 278:	df 92       	push	r13
 27a:	ef 92       	push	r14
 27c:	ff 92       	push	r15
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	d8 2f       	mov	r29, r24
 288:	7b 01       	movw	r14, r22
 28a:	c4 2f       	mov	r28, r20
 28c:	59 01       	movw	r10, r18
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
 28e:	8c 30       	cpi	r24, 0x0C	; 12
 290:	29 f0       	breq	.+10     	; 0x29c <mfrc522_to_card+0x36>
 292:	8e 30       	cpi	r24, 0x0E	; 14
 294:	61 f0       	breq	.+24     	; 0x2ae <mfrc522_to_card+0x48>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 296:	91 2c       	mov	r9, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
 298:	81 2c       	mov	r8, r1
 29a:	10 c0       	rjmp	.+32     	; 0x2bc <mfrc522_to_card+0x56>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 29c:	0f 2e       	mov	r0, r31
 29e:	f0 e3       	ldi	r31, 0x30	; 48
 2a0:	9f 2e       	mov	r9, r31
 2a2:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 2a4:	0f 2e       	mov	r0, r31
 2a6:	f7 e7       	ldi	r31, 0x77	; 119
 2a8:	8f 2e       	mov	r8, r31
 2aa:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
 2ac:	07 c0       	rjmp	.+14     	; 0x2bc <mfrc522_to_card+0x56>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 2ae:	68 94       	set
 2b0:	99 24       	eor	r9, r9
 2b2:	94 f8       	bld	r9, 4

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
 2b4:	0f 2e       	mov	r0, r31
 2b6:	f2 e1       	ldi	r31, 0x12	; 18
 2b8:	8f 2e       	mov	r8, r31
 2ba:	f0 2d       	mov	r31, r0
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 2bc:	84 e0       	ldi	r24, 0x04	; 4
 2be:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 2c2:	68 2f       	mov	r22, r24
 2c4:	6f 77       	andi	r22, 0x7F	; 127
 2c6:	84 e0       	ldi	r24, 0x04	; 4
 2c8:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 2cc:	8a e0       	ldi	r24, 0x0A	; 10
 2ce:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 2d2:	68 2f       	mov	r22, r24
 2d4:	60 68       	ori	r22, 0x80	; 128
 2d6:	8a e0       	ldi	r24, 0x0A	; 10
 2d8:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 2e4:	41 2c       	mov	r4, r1
 2e6:	51 2c       	mov	r5, r1
 2e8:	32 01       	movw	r6, r4
 2ea:	0c c0       	rjmp	.+24     	; 0x304 <mfrc522_to_card+0x9e>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 2ec:	f7 01       	movw	r30, r14
 2ee:	e4 0d       	add	r30, r4
 2f0:	f5 1d       	adc	r31, r5
 2f2:	60 81       	ld	r22, Z
 2f4:	89 e0       	ldi	r24, 0x09	; 9
 2f6:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	48 1a       	sub	r4, r24
 2fe:	58 0a       	sbc	r5, r24
 300:	68 0a       	sbc	r6, r24
 302:	78 0a       	sbc	r7, r24
 304:	8c 2f       	mov	r24, r28
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	a0 e0       	ldi	r26, 0x00	; 0
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	48 16       	cp	r4, r24
 30e:	59 06       	cpc	r5, r25
 310:	6a 06       	cpc	r6, r26
 312:	7b 06       	cpc	r7, r27
 314:	58 f3       	brcs	.-42     	; 0x2ec <mfrc522_to_card+0x86>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 316:	6d 2f       	mov	r22, r29
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
    if (cmd == Transceive_CMD)
 31e:	dc 30       	cpi	r29, 0x0C	; 12
 320:	41 f4       	brne	.+16     	; 0x332 <mfrc522_to_card+0xcc>
    {    
		n=mfrc522_read(BitFramingReg);
 322:	8d e0       	ldi	r24, 0x0D	; 13
 324:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
 328:	68 2f       	mov	r22, r24
 32a:	60 68       	ori	r22, 0x80	; 128
 32c:	8d e0       	ldi	r24, 0x0D	; 13
 32e:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 332:	0f 2e       	mov	r0, r31
 334:	f0 ed       	ldi	r31, 0xD0	; 208
 336:	cf 2e       	mov	r12, r31
 338:	f7 e0       	ldi	r31, 0x07	; 7
 33a:	df 2e       	mov	r13, r31
 33c:	e1 2c       	mov	r14, r1
 33e:	f1 2c       	mov	r15, r1
 340:	f0 2d       	mov	r31, r0
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 342:	84 e0       	ldi	r24, 0x04	; 4
 344:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mfrc522_read>
 348:	c8 2f       	mov	r28, r24
        i--;
 34a:	e1 e0       	ldi	r30, 0x01	; 1
 34c:	ce 1a       	sub	r12, r30
 34e:	d1 08       	sbc	r13, r1
 350:	e1 08       	sbc	r14, r1
 352:	f1 08       	sbc	r15, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 354:	29 f0       	breq	.+10     	; 0x360 <mfrc522_to_card+0xfa>
 356:	80 fd       	sbrc	r24, 0
 358:	03 c0       	rjmp	.+6      	; 0x360 <mfrc522_to_card+0xfa>
 35a:	89 2d       	mov	r24, r9
 35c:	8c 23       	and	r24, r28
 35e:	89 f3       	breq	.-30     	; 0x342 <mfrc522_to_card+0xdc>

	tmp=mfrc522_read(BitFramingReg);
 360:	8d e0       	ldi	r24, 0x0D	; 13
 362:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 366:	68 2f       	mov	r22, r24
 368:	6f 77       	andi	r22, 0x7F	; 127
 36a:	8d e0       	ldi	r24, 0x0D	; 13
 36c:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
	
    if (i != 0)
 370:	cd 28       	or	r12, r13
 372:	ce 28       	or	r12, r14
 374:	cf 28       	or	r12, r15
 376:	09 f4       	brne	.+2      	; 0x37a <mfrc522_to_card+0x114>
 378:	60 c0       	rjmp	.+192    	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 37a:	86 e0       	ldi	r24, 0x06	; 6
 37c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mfrc522_read>
 380:	8b 71       	andi	r24, 0x1B	; 27
 382:	09 f0       	breq	.+2      	; 0x386 <mfrc522_to_card+0x120>
 384:	5c c0       	rjmp	.+184    	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
 386:	c8 21       	and	r28, r8
 388:	c0 fd       	sbrc	r28, 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <mfrc522_to_card+0x12a>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 38c:	c1 e0       	ldi	r28, 0x01	; 1
 38e:	01 c0       	rjmp	.+2      	; 0x392 <mfrc522_to_card+0x12c>
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
 390:	c2 e0       	ldi	r28, 0x02	; 2
			}

            if (cmd == Transceive_CMD)
 392:	dc 30       	cpi	r29, 0x0C	; 12
 394:	09 f0       	breq	.+2      	; 0x398 <mfrc522_to_card+0x132>
 396:	54 c0       	rjmp	.+168    	; 0x440 <__DATA_REGION_LENGTH__+0x40>
            {
               	n = mfrc522_read(FIFOLevelReg);
 398:	8a e0       	ldi	r24, 0x0A	; 10
 39a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mfrc522_read>
 39e:	d8 2f       	mov	r29, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
 3a0:	8c e0       	ldi	r24, 0x0C	; 12
 3a2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mfrc522_read>
 3a6:	28 2f       	mov	r18, r24
 3a8:	27 70       	andi	r18, 0x07	; 7
                if (lastBits)
 3aa:	a9 f0       	breq	.+42     	; 0x3d6 <mfrc522_to_card+0x170>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 3ac:	8d 2f       	mov	r24, r29
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	82 0f       	add	r24, r18
 3c0:	91 1d       	adc	r25, r1
 3c2:	09 2e       	mov	r0, r25
 3c4:	00 0c       	add	r0, r0
 3c6:	aa 0b       	sbc	r26, r26
 3c8:	bb 0b       	sbc	r27, r27
 3ca:	f8 01       	movw	r30, r16
 3cc:	80 83       	st	Z, r24
 3ce:	91 83       	std	Z+1, r25	; 0x01
 3d0:	a2 83       	std	Z+2, r26	; 0x02
 3d2:	b3 83       	std	Z+3, r27	; 0x03
 3d4:	11 c0       	rjmp	.+34     	; 0x3f8 <mfrc522_to_card+0x192>
				}
                else
                {   
					*back_data_len = n*8;   
 3d6:	8d 2f       	mov	r24, r29
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	09 2e       	mov	r0, r25
 3e8:	00 0c       	add	r0, r0
 3ea:	aa 0b       	sbc	r26, r26
 3ec:	bb 0b       	sbc	r27, r27
 3ee:	f8 01       	movw	r30, r16
 3f0:	80 83       	st	Z, r24
 3f2:	91 83       	std	Z+1, r25	; 0x01
 3f4:	a2 83       	std	Z+2, r26	; 0x02
 3f6:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
 3f8:	d1 11       	cpse	r29, r1
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <mfrc522_to_card+0x198>
                {   
					n = 1;    
 3fc:	d1 e0       	ldi	r29, 0x01	; 1
				}
                if (n > MAX_LEN)
 3fe:	d1 31       	cpi	r29, 0x11	; 17
 400:	08 f0       	brcs	.+2      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
                {   
					n = MAX_LEN;   
 402:	d0 e1       	ldi	r29, 0x10	; 16
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 404:	c1 2c       	mov	r12, r1
 406:	d1 2c       	mov	r13, r1
 408:	76 01       	movw	r14, r12
 40a:	0d c0       	rjmp	.+26     	; 0x426 <__DATA_REGION_LENGTH__+0x26>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 40c:	85 01       	movw	r16, r10
 40e:	0c 0d       	add	r16, r12
 410:	1d 1d       	adc	r17, r13
 412:	89 e0       	ldi	r24, 0x09	; 9
 414:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mfrc522_read>
 418:	f8 01       	movw	r30, r16
 41a:	80 83       	st	Z, r24
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 41c:	ff ef       	ldi	r31, 0xFF	; 255
 41e:	cf 1a       	sub	r12, r31
 420:	df 0a       	sbc	r13, r31
 422:	ef 0a       	sbc	r14, r31
 424:	ff 0a       	sbc	r15, r31
 426:	8d 2f       	mov	r24, r29
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	a0 e0       	ldi	r26, 0x00	; 0
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	c8 16       	cp	r12, r24
 430:	d9 06       	cpc	r13, r25
 432:	ea 06       	cpc	r14, r26
 434:	fb 06       	cpc	r15, r27
 436:	50 f3       	brcs	.-44     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
 438:	03 c0       	rjmp	.+6      	; 0x440 <__DATA_REGION_LENGTH__+0x40>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 43a:	c3 e0       	ldi	r28, 0x03	; 3
 43c:	01 c0       	rjmp	.+2      	; 0x440 <__DATA_REGION_LENGTH__+0x40>
				}
            }
        }
        else
        {   
			status = ERROR;  
 43e:	c3 e0       	ldi	r28, 0x03	; 3
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
 440:	8c 2f       	mov	r24, r28
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	1f 91       	pop	r17
 448:	0f 91       	pop	r16
 44a:	ff 90       	pop	r15
 44c:	ef 90       	pop	r14
 44e:	df 90       	pop	r13
 450:	cf 90       	pop	r12
 452:	bf 90       	pop	r11
 454:	af 90       	pop	r10
 456:	9f 90       	pop	r9
 458:	8f 90       	pop	r8
 45a:	7f 90       	pop	r7
 45c:	6f 90       	pop	r6
 45e:	5f 90       	pop	r5
 460:	4f 90       	pop	r4
 462:	08 95       	ret

00000464 <mfrc522_request>:
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 464:	ef 92       	push	r14
 466:	ff 92       	push	r15
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	00 d0       	rcall	.+0      	; 0x472 <mfrc522_request+0xe>
 472:	00 d0       	rcall	.+0      	; 0x474 <mfrc522_request+0x10>
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
 478:	18 2f       	mov	r17, r24
 47a:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07); //TxLastBists = BitFramingReg[2..0]	???
 47c:	67 e0       	ldi	r22, 0x07	; 7
 47e:	8d e0       	ldi	r24, 0x0D	; 13
 480:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
	
	tag_type[0] = req_mode;
 484:	f7 01       	movw	r30, r14
 486:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 488:	8e 01       	movw	r16, r28
 48a:	0f 5f       	subi	r16, 0xFF	; 255
 48c:	1f 4f       	sbci	r17, 0xFF	; 255
 48e:	97 01       	movw	r18, r14
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	b7 01       	movw	r22, r14
 494:	8c e0       	ldi	r24, 0x0C	; 12
 496:	0e 94 33 01 	call	0x266	; 0x266 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	51 f4       	brne	.+20     	; 0x4b2 <mfrc522_request+0x4e>
 49e:	49 81       	ldd	r20, Y+1	; 0x01
 4a0:	5a 81       	ldd	r21, Y+2	; 0x02
 4a2:	6b 81       	ldd	r22, Y+3	; 0x03
 4a4:	7c 81       	ldd	r23, Y+4	; 0x04
 4a6:	40 31       	cpi	r20, 0x10	; 16
 4a8:	51 05       	cpc	r21, r1
 4aa:	61 05       	cpc	r22, r1
 4ac:	71 05       	cpc	r23, r1
 4ae:	19 f4       	brne	.+6      	; 0x4b6 <mfrc522_request+0x52>
 4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <mfrc522_request+0x54>
	{    
		status = ERROR;
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <mfrc522_request+0x54>
 4b6:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	08 95       	ret

000004ce <mfrc522_get_card_serial>:

    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out) {
 4ce:	ef 92       	push	r14
 4d0:	ff 92       	push	r15
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	00 d0       	rcall	.+0      	; 0x4dc <mfrc522_get_card_serial+0xe>
 4dc:	00 d0       	rcall	.+0      	; 0x4de <mfrc522_get_card_serial+0x10>
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
 4e2:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	8d e0       	ldi	r24, 0x0D	; 13
 4e8:	0e 94 de 00 	call	0x1bc	; 0x1bc <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
 4ec:	83 e9       	ldi	r24, 0x93	; 147
 4ee:	f7 01       	movw	r30, r14
 4f0:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
 4f2:	80 e2       	ldi	r24, 0x20	; 32
 4f4:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 4f6:	8e 01       	movw	r16, r28
 4f8:	0f 5f       	subi	r16, 0xFF	; 255
 4fa:	1f 4f       	sbci	r17, 0xFF	; 255
 4fc:	97 01       	movw	r18, r14
 4fe:	42 e0       	ldi	r20, 0x02	; 2
 500:	b7 01       	movw	r22, r14
 502:	8c e0       	ldi	r24, 0x0C	; 12
 504:	0e 94 33 01 	call	0x266	; 0x266 <mfrc522_to_card>

    if (status == CARD_FOUND)
 508:	81 30       	cpi	r24, 0x01	; 1
 50a:	91 f4       	brne	.+36     	; 0x530 <mfrc522_get_card_serial+0x62>
 50c:	07 c0       	rjmp	.+14     	; 0x51c <mfrc522_get_card_serial+0x4e>
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
 50e:	f7 01       	movw	r30, r14
 510:	e9 0f       	add	r30, r25
 512:	f1 1d       	adc	r31, r1
 514:	30 81       	ld	r19, Z
 516:	23 27       	eor	r18, r19
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 518:	9f 5f       	subi	r25, 0xFF	; 255
 51a:	02 c0       	rjmp	.+4      	; 0x520 <mfrc522_get_card_serial+0x52>
 51c:	20 e0       	ldi	r18, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	94 30       	cpi	r25, 0x04	; 4
 522:	a8 f3       	brcs	.-22     	; 0x50e <mfrc522_get_card_serial+0x40>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 524:	f7 01       	movw	r30, r14
 526:	e9 0f       	add	r30, r25
 528:	f1 1d       	adc	r31, r1
 52a:	90 81       	ld	r25, Z
 52c:	29 13       	cpse	r18, r25
		{   
			status = ERROR;    
 52e:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
 530:	0f 90       	pop	r0
 532:	0f 90       	pop	r0
 534:	0f 90       	pop	r0
 536:	0f 90       	pop	r0
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	1f 91       	pop	r17
 53e:	0f 91       	pop	r16
 540:	ff 90       	pop	r15
 542:	ef 90       	pop	r14
 544:	08 95       	ret

00000546 <spi_init>:


#include "spi.h"

void spi_init() {
	SPI_DDR |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 546:	87 b3       	in	r24, 0x17	; 23
 548:	80 6b       	ori	r24, 0xB0	; 176
 54a:	87 bb       	out	0x17, r24	; 23
	//
	DDRB &= ~(1<<SPI_MISO);	
 54c:	87 b3       	in	r24, 0x17	; 23
 54e:	8f 7b       	andi	r24, 0xBF	; 191
 550:	87 bb       	out	0x17, r24	; 23
	SPSR &= ~(1<<SPI2X);
 552:	8e b1       	in	r24, 0x0e	; 14
 554:	8e 7f       	andi	r24, 0xFE	; 254
 556:	8e b9       	out	0x0e, r24	; 14
	//
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);	//prescaler 16
 558:	8d b1       	in	r24, 0x0d	; 13
 55a:	81 65       	ori	r24, 0x51	; 81
 55c:	8d b9       	out	0x0d, r24	; 13
 55e:	08 95       	ret

00000560 <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data) {
	SPDR = data;
 560:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 562:	77 9b       	sbis	0x0e, 7	; 14
 564:	fe cf       	rjmp	.-4      	; 0x562 <spi_transmit+0x2>
	
	return SPDR;
 566:	8f b1       	in	r24, 0x0f	; 15
}
 568:	08 95       	ret

0000056a <usart_putc>:
	//// frame format: 8 data bits, 1 stop bit, no parity
	//UCSRC = _BV(URSEL) | _BV(UCSZ0) | _BV(UCSZ1) ;
//}

void usart_putc(const unsigned char data) {
	while ( !( UCSRA & _BV(UDRE)) );
 56a:	5d 9b       	sbis	0x0b, 5	; 11
 56c:	fe cf       	rjmp	.-4      	; 0x56a <usart_putc>
	UDR = data;
 56e:	8c b9       	out	0x0c, r24	; 12
 570:	08 95       	ret

00000572 <usart_puts>:
}

void usart_puts(const char* data) {
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	ec 01       	movw	r28, r24
	while(*data != 0x00){
 578:	03 c0       	rjmp	.+6      	; 0x580 <usart_puts+0xe>
		usart_putc(*data);
 57a:	0e 94 b5 02 	call	0x56a	; 0x56a <usart_putc>
		data++;
 57e:	21 96       	adiw	r28, 0x01	; 1
	while ( !( UCSRA & _BV(UDRE)) );
	UDR = data;
}

void usart_puts(const char* data) {
	while(*data != 0x00){
 580:	88 81       	ld	r24, Y
 582:	81 11       	cpse	r24, r1
 584:	fa cf       	rjmp	.-12     	; 0x57a <usart_puts+0x8>
		usart_putc(*data);
		data++;
	}
}
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	08 95       	ret

0000058c <usart_hex>:

void usart_hex(uint8_t d) {
 58c:	cf 93       	push	r28
 58e:	c8 2f       	mov	r28, r24
	char byte = '0';
	// send lower nibble as hex char
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
 590:	82 95       	swap	r24
 592:	8f 70       	andi	r24, 0x0F	; 15
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	2a 30       	cpi	r18, 0x0A	; 10
 59a:	31 05       	cpc	r19, r1
 59c:	14 f4       	brge	.+4      	; 0x5a2 <usart_hex+0x16>
 59e:	80 5d       	subi	r24, 0xD0	; 208
 5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <usart_hex+0x18>
 5a2:	89 5c       	subi	r24, 0xC9	; 201
	usart_putc(byte);
 5a4:	0e 94 b5 02 	call	0x56a	; 0x56a <usart_putc>
 5a8:	cf 70       	andi	r28, 0x0F	; 15
	// send higher nibble as hex char
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
 5aa:	8c 2f       	mov	r24, r28
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0a 97       	sbiw	r24, 0x0a	; 10
 5b0:	1c f4       	brge	.+6      	; 0x5b8 <usart_hex+0x2c>
 5b2:	80 e3       	ldi	r24, 0x30	; 48
 5b4:	8c 0f       	add	r24, r28
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <usart_hex+0x30>
 5b8:	87 e3       	ldi	r24, 0x37	; 55
 5ba:	8c 0f       	add	r24, r28
	usart_putc(byte);
 5bc:	0e 94 b5 02 	call	0x56a	; 0x56a <usart_putc>
}
 5c0:	cf 91       	pop	r28
 5c2:	08 95       	ret

000005c4 <_exit>:
 5c4:	f8 94       	cli

000005c6 <__stop_program>:
 5c6:	ff cf       	rjmp	.-2      	; 0x5c6 <__stop_program>
